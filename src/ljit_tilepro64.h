/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.1.4, DynASM tilepro64 version 0.0.2
** DO NOT EDIT! The original file is in "ljit_tilepro64.dasc".
*/

#if DASM_VERSION != 10104
#error "Version mismatch between DynASM and included encoding engine"
#endif

# 1 "ljit_tilepro64.dasc"
/*
 * Random shit
 */

//|.include ljit_tilepro64.dash
# 1 "ljit_tilepro64.dash"
//|.arch tilepro64
//|
//|// Types
//|.type L,		lua_State,	r42
#define Dt1(_V) (int)&(((lua_State *)0)_V)
# 5 "ljit_tilepro64.dash"
//|.type BASE,	TValue,		r43
#define Dt2(_V) (int)&(((TValue *)0)_V)
# 6 "ljit_tilepro64.dash"
//|.type TOP,		TValue,		r44
#define Dt3(_V) (int)&(((TValue *)0)_V)
# 7 "ljit_tilepro64.dash"
//|.type CI,		CallInfo,	r45
#define Dt4(_V) (int)&(((CallInfo *)0)_V)
# 8 "ljit_tilepro64.dash"
//|.type LCL,		LClosure,	r46
#define Dt5(_V) (int)&(((LClosure *)0)_V)
# 9 "ljit_tilepro64.dash"
//|.type CTOP,	TValue,		r47
#define Dt6(_V) (int)&(((TValue *)0)_V)
# 10 "ljit_tilepro64.dash"
//|.type SCRATCHTV,	TValue,		r5
#define Dt7(_V) (int)&(((TValue *)0)_V)
# 11 "ljit_tilepro64.dash"
//|
//|// Types
//|.type GL,			global_State
#define Dt8(_V) (int)&(((global_State *)0)_V)
# 14 "ljit_tilepro64.dash"
//|.type TVALUE,		TValue
#define Dt9(_V) (int)&(((TValue *)0)_V)
# 15 "ljit_tilepro64.dash"
//|.type VALUE,		Value
#define DtA(_V) (int)&(((Value *)0)_V)
# 16 "ljit_tilepro64.dash"
//|.type CINFO,		CallInfo
#define DtB(_V) (int)&(((CallInfo *)0)_V)
# 17 "ljit_tilepro64.dash"
//|.type GCOBJECT,	GCObject
#define DtC(_V) (int)&(((GCObject *)0)_V)
# 18 "ljit_tilepro64.dash"
//|.type TSTRING,		TString
#define DtD(_V) (int)&(((TString *)0)_V)
# 19 "ljit_tilepro64.dash"
//|.type TABLE,		Table
#define DtE(_V) (int)&(((Table *)0)_V)
# 20 "ljit_tilepro64.dash"
//|.type CCLOSURE,	CClosure
#define DtF(_V) (int)&(((CClosure *)0)_V)
# 21 "ljit_tilepro64.dash"
//|.type PROTO,		Proto
#define Dt10(_V) (int)&(((Proto *)0)_V)
# 22 "ljit_tilepro64.dash"
//|.type UPVAL,		UpVal
#define Dt11(_V) (int)&(((UpVal *)0)_V)
# 23 "ljit_tilepro64.dash"
//|.type NODE,		Node
#define Dt12(_V) (int)&(((Node *)0)_V)
# 24 "ljit_tilepro64.dash"
//|
//|// Definitions copied to DynASM domain to avoid unnecessary constant args.
//|// CHECK: must match with the definitions in lua.h!
//|.define LUA_TNIL,				0
//|.define LUA_TBOOLEAN,			1
//|.define LUA_TLIGHTUSERDATA,	2
//|.define LUA_TNUMBER,			3
//|.define LUA_TSTRING,			4
//|.define LUA_TTABLE,			5
//|.define LUA_TFUNCTION,			6
//|.define LUA_TUSERDATA,			7
//|.define LUA_TTHREAD,			8
//|
//|.define LUA_TNUM_NUM,		0x33
//|.define LUA_TNUM_NUM_NUM,	0x333
//|.define LUA_TSTR_STR,		0x44
//|.define LUA_TSTR_NUM,		0x43
//|.define LUA_TSTR_NUM_NUM,	0x433
//|.define LUA_TTABLE_NUM,	0x53
//|.define LUA_TTABLE_STR,	0x54
//|
//|
//|// Assembler pseudo instructions. Should actually be put in dynasm, putting them here for now
//|.macro move, dst, src; or dst, src, zero; .endmacro
//|.macro movei, dst, simm8; ori dst, zero, simm8; .endmacro
//|.macro moveli, dst, simm16; addli dst, zero, simm16; .endmacro
//|.macro movelis, dst, simm16; addlis dst, zero, simm16; .endmacro
//|.macro prefetch, src; lb_u zero, src; .endmacro
//|.macro bpt; ill; .endmacro
//|.macro info, simm8; andi zero, zero, simm8; .endmacro
//|.macro infol, simm16; auli zero, zero, simm16; .endmacro
//|
//|// Own pseudo instructions to handle 32 bit stuff easier
//|.macro movewi, dst, simm32
//|	addli dst, zero, lo16(simm32)
//|	auli dst, dst, ha16(simm32)
//|.endmacro
//|
//|.macro movemwi, dst, simm32
//|	addli r25, zero, lo16(simm32)
//|	auli r25, r25, ha16(simm32)
//|	move dst, r25
//|.endmacro
//|
//|//==================================================================
//|// Pseudo instructions specific to this project
//|// Stack-related
//|.macro prologue, size
//|	sw sp, lr
//|	addi sp, sp, -size
//|.endmacro
//|
//|.macro epilogue, size
//|	addi sp, sp, size
//|	lw lr, sp
//|.endmacro
//|
//|.macro loadfromstack, reg, idx
//|	addi r25, sp, idx
//|	lw reg, r25
//|.endmacro
//|
//|.macro storeonstack, reg, idx
//|	addi r25, sp, idx
//|	sw r25, reg
//|.endmacro
//|
//|//==========================================================================
//|
//|.macro preserveglobalregs
//|	storeonstack BASE, 8
//|	storeonstack L, 12
//|	storeonstack TOP, 16
//|	storeonstack LCL, 20
//|	storeonstack CI, 24
//|.endmacro
//|
//|.macro restoreglobalregs
//|	loadfromstack CI, 24
//|	loadfromstack LCL, 20
//|	loadfromstack TOP, 16
//|	loadfromstack L, 12
//|	loadfromstack BASE, 8
//|.endmacro
//|
//|//============================================================================
//|
//|.macro globals_LJ_L, l
//|	move L, l
//|.endmacro
//|
//|.macro globals_LJ_BASE, base
//|	move BASE, base
//|.endmacro
//|
//|.macro globals_LJ_TOP
//|	move TOP, L->top
//|.endmacro
//|
//|.macro globals_LJ_LCL, orig
//|	move LCL, orig
//|.endmacro
//|
//|.macro globals_LJ_CI
//|	move CI, L->ci
//|.endmacro
//|
//|.macro globals_LJ, base
//|	globals_LJ_BASE base
//|	globals_LJ_TOP
//|	globals_LJ_CI
//|.endmacro
//|
//|.macro globals_JL_BASE
//|	move L->base, BASE
//|	move CI->base, BASE
//|	subidx TVALUE:r25, BASE, 1
//|	move CI->func, r25
//|.endmacro
//|
//|.macro globals_JL_CI
//|	move L->ci, CI
//|.endmacro
//|
//|.macro globals_JL_savedpc
//|	move L->savedpc, CI->savedpc
//|.endmacro
//|
//|.macro globals_JL_TOP
//|	move L->top, TOP
//|.endmacro
//|
//|.macro globals_JL
//|	globals_JL_BASE
//|	globals_JL_CI
//|	globals_JL_TOP
//|	globals_JL_savedpc
//|.endmacro
//|//=========================================================================
//|
//|.define LUAFUNC_STACK_SIZE, 8
//|
//|// Easier word multiply
//|.macro mulw_uu, d, a, b
//|	mulhl_uu d, a, b
//|	mulhla_uu d, b, a
//|	shli d, d, 8
//|	mullla_uu d, a, b
//|	mulhhsa_uu d, a, b
//|.endmacro
//|
//|.macro mulw_ss, d, a, b
//|	mulhl_ss d, a, b
//|	mulhla_ss d, b, a
//|	shli d, d, 8
//|	mullla_ss d, a, b
//|	mulhhsa_ss d, a, b
//|.endmacro
//|
//|.macro istt, dst, idx, tp; seqi dst, BASE[idx].tt, tp; .endmacro
//|.macro isnil, dst, idx; istt dst, idx, LUA_TNIL; .endmacro
//|.macro isnumber, dst, idx;  istt dst, idx, LUA_TNUMBER; .endmacro
//|.macro isstring, dst, idx;  istt dst, idx, LUA_TSTRING; .endmacro
//|.macro istable, dst, idx;  istt dst, idx, LUA_TTABLE; .endmacro
//|.macro isfunction, dst, idx;  istt dst, idx, LUA_TFUNCTION; .endmacro
//|
//|.macro settt, val, tp; move val.tt, tp; .endmacro
//|.macro settti, val, tp; movei val.tt, tp; .endmacro
//|
//|
//|.macro copyslot, D, S
//|	move D.value, S.value
//|	move D.value.na[1], S.value.na[1]
//|	move D.tt, S.tt
//|.endmacro
//|
//|.macro loadnumber, reg1, reg2, src
//|	move reg1, src.value
//|	move reg2, src.value.na[1]
//|.endmacro
//|
//|.macro storenumber, dst, reg1, reg2
//|	move dst.value, reg1
//|	move dst.value.na[1], reg2
//|.endmacro
//|
# 247 "ljit_tilepro64.dash"
//|
//|.macro setbvalue, tv, val		// May use edx.
//||if (val) {  /* true */
//|   movei r25, LUA_TBOOLEAN
//|   move tv.value, r25		// Assumes: LUA_TBOOLEAN == 1
//|   settt tv, r25
//||} else {  /* false */
//|   movei tv.value, 0
//|   settti tv, LUA_TBOOLEAN
//||}
//|.endmacro
//|
//|.macro setsvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TSTRING
//|.endmacro
//|
//|.macro sethvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TABLE
//|.endmacro
//|
//|.macro sethvaluer, tv, reg
//|	move tv.value, reg
//|	settti tv, LUA_TTABLE
//|.endmacro
//|
//|.macro setclvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TFUNCTION
//|.endmacro
//|
//|.macro setclvaluer, tv, reg
//|	move tv.value, reg
//|	settti tv, LUA_TFUNCTION
//|.endmacro
//|
//|.macro setnilvalue, tv
//|	settti tv, LUA_TNIL
//|.endmacro
//|
//|.macro addidx, dst, src, idx
//|	addi dst, src, (idx)*#src
//|.endmacro
//|
//|.macro subidx, dst, src, idx
//|	addi dst, src, -(idx)*#src
//|.endmacro
//|
# 6 "ljit_tilepro64.dasc"
//|.actionnames jit_actionnames
enum	jit_actionnames {
	DASM_IMM = 2147483637,
	DASM_L,
	DASM_G,
	DASM_PC,
	DASM_LABEL_L,
	DASM_LABEL_G,
	DASM_LABEL_PC,
	DASM_ALIGN,
	DASM_SECTION,
	DASM_ESC,
	DASM_STOP,
};

#define lo16(n) ((((signed int)n) << 16) >> 16)
#define hi16(n) (((signed int)n) >> 16)
#define ha16(n) ((lo16(n) < 0) ? hi16(n) + 1 : hi16(n))


# 7 "ljit_tilepro64.dasc"
//|.immencmodes
#include "dasm_tilepro64_encmodes.h"
# 8 "ljit_tilepro64.dasc"
//|.actionlist jit_actionlist
static const signed long jit_actionlist[3880] = {
  13630144,1074472960,13630209,1074472960,13630274,1074472960,13630083,1074472960,
  536874948,1074472960,DASM_IMM,IEM_X0_Imm16,805306628,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,142720704,
  1077906870,1074472960,1076890313,1074472960,DASM_IMM,IEM_X0_Imm8,1082134465,
  1074472960,DASM_IMM,IEM_X0_Imm8,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,22131264,
  1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,11,1880510464,0,DASM_G,IEM_X1_J_jal,
  0,1076890313,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LABEL_L,1,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,17414976,1074472960,-266973184,671088640,DASM_L,IEM_X1_Br,12,1880510464,
  0,DASM_G,IEM_X1_J_jal,1,1076890313,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LABEL_L,
  2,1076890477,1074472960,DASM_IMM,IEM_X0_Imm8,13627995,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_STOP,DASM_LABEL_L,7,1082134491,1074472960,536871450,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,1076888072,1074472960,DASM_IMM,IEM_X0_Imm8,22200832,
  1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,7,DASM_STOP,DASM_ALIGN,7,
  DASM_LABEL_G,2,1880510464,142720704,1077808566,1074472960,1076923801,1074472960,
  1880510464,142695200,1076940185,1074472960,1880510464,142693152,1076956569,
  1074472960,1880510464,142697248,1076972953,1074472960,1880510464,142701344,
  1076989337,1074472960,1880510464,142699296,13627434,1074472960,13627499,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629165,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629166,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,1076893467,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,1077005721,1074472960,1880510464,142611232,DASM_STOP,
  536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,1880510464,135398240,1077005721,1074472960,
  1880510464,1074492193,1086320768,1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,
  12,1082134469,1074472960,DASM_IMM,IEM_X0_Imm8,9719940,1074472960,8397124,
  1074472960,1880510464,1074020482,10506372,1074472960,6574212,1074472960,805576,
  1074472960,DASM_STOP,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,
  DASM_LABEL_L,2,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,1077933851,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,
  13630171,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630171,1074472960,
  536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1076890329,1074472960,DASM_IMM,IEM_X0_Imm8,
  13629019,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,1880510464,142662464,DASM_STOP,1076989337,1074472960,-266973184,
  1074492214,1076972953,1074472960,1880510464,1074492215,1076956569,1074472960,
  1880510464,1074492214,1076940185,1074472960,1880510464,1074492213,1076923801,
  1074472960,-266973184,1074492213,1082134464,1074472960,DASM_IMM,IEM_X0_Imm8,
  1077022134,1074472960,-266973184,1074493147,1880510464,135661280,DASM_ALIGN,
  7,DASM_LABEL_G,3,1880510464,142720704,1077906870,1074472960,DASM_STOP,536873882,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629126,1074472960,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1085277888,
  1074472960,DASM_IMM,IEM_X0_Imm8,-266973184,671088640,DASM_L,IEM_X1_Br,11,
  536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629125,1074472960,13627739,1074472960,
  536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1880510464,135790752,DASM_LABEL_L,1,13630171,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630171,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,1076890329,1074472960,DASM_IMM,IEM_X0_Imm8,13629019,
  1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13630235,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630080,1074472960,13630145,1074472960,1083178946,1074472960,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,-266973184,671088641,DASM_L,IEM_X1_Br,12,13630080,
  1074472960,1082138561,1074472960,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,
  DASM_LABEL_L,2,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_STOP,1076923830,1074472960,-266973184,1074493147,1880510464,
  135661280,DASM_ALIGN,7,DASM_LABEL_G,4,DASM_STOP,13630171,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629127,1074472960,
  1076890347,1074472960,DASM_IMM,IEM_X0_Imm8,13630171,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13630171,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630171,
  1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1076890329,1074472960,DASM_IMM,
  IEM_X0_Imm8,13629019,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630080,1074472960,536871386,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,1880510464,135398240,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629163,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629165,1074472960,1076890477,1074472960,
  DASM_IMM,IEM_X0_Imm8,1076890347,1074472960,DASM_IMM,IEM_X0_Imm8,1082134470,
  1074472960,DASM_IMM,IEM_X0_Imm8,9723907,1074472960,8388995,1074472960,-266973184,
  1074020449,10510339,1074472960,6578179,1074472960,24394504,1074472960,13630148,
  1074472960,22200833,1074472960,-266973184,671088672,DASM_L,IEM_X1_Br,12,DASM_LABEL_L,
  1,536871450,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536871194,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,536871450,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536871194,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871450,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536871194,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1076887812,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_STOP,1076888072,1074472960,DASM_IMM,IEM_X0_Imm8,22200833,1074472960,
  -266973184,671088673,DASM_L,IEM_X1_Br,1,DASM_LABEL_L,2,801516,1074472960,
  DASM_STOP,1076923830,1074472960,-266973184,1074493147,1880510464,135661280,
  DASM_ALIGN,7,DASM_LABEL_G,0,1880510464,142720704,1077906870,1074472960,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630080,1074472960,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,1076923830,1074472960,-266973184,1074493147,1880510464,
  135661280,DASM_ALIGN,7,DASM_LABEL_G,1,1880510464,142720704,1077906870,1074472960,
  13630235,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630080,1074472960,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,1076923830,1074472960,-266973184,1074493147,
  1880510464,135661280,DASM_ALIGN,7,DASM_STOP,DASM_LABEL_PC,DASM_STOP,DASM_ALIGN,
  7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65535,0,0,0,0,0,DASM_STOP,1076890347,
  1074472960,DASM_IMM,IEM_X0_Imm8,13628012,1074472960,DASM_STOP,1076890312,
  1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,13630080,1074472960,13630145,1074472960,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1076890477,1074472960,DASM_IMM,
  IEM_X0_Imm8,1076890347,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,1076890412,
  1074472960,DASM_IMM,IEM_X0_Imm8,13630149,1074472960,22200640,1074472960,-266973184,
  671088640,DASM_L,IEM_X1_Br,12,DASM_LABEL_L,1,536871258,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1076887877,
  1074472960,DASM_IMM,IEM_X0_Imm8,22200640,1074472960,-266973184,671088641,
  DASM_L,IEM_X1_Br,1,DASM_LABEL_L,2,1082134491,1074472960,536873754,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,1076890312,
  1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,1076890348,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,1076923830,1074472960,-266973184,1074493147,1880510464,
  135661280,DASM_STOP,1076890347,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,
  1076890348,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629166,1074472960,536874969,1074472960,DASM_IMM,IEM_X0_Imm16,
  805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1880510464,135398240,
  DASM_STOP,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,DASM_STOP,
  1076890347,1074472960,DASM_IMM,IEM_X0_Imm8,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629166,1074472960,DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  536874945,1074472960,DASM_IMM,IEM_X0_Imm16,805306433,1074472960,DASM_IMM,
  IEM_X0_Imm16,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,1880510464,135661280,
  DASM_STOP,1082134491,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  1082138585,1074472960,13629019,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13629019,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,1082134491,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1082138587,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_STOP,1880510464,0,DASM_PC,IEM_X1_J_j,DASM_STOP,536873882,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629127,1074472960,536871386,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629125,
  1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,536873882,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629121,1074472960,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629125,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1082150848,1074472960,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,21082120,1074472960,-266973184,671088896,DASM_L,IEM_X1_Br,
  15,DASM_LABEL_L,4,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,536871066,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,1343227587,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,
  -266973184,671088736,DASM_L,IEM_X1_Br,15,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1343227588,
  1074472960,DASM_IMM,IEM_X0_Imm8,-266973184,671088768,DASM_L,IEM_X1_Br,15,
  13630080,1074472960,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LABEL_L,5,DASM_STOP,
  13630080,1074472960,536874945,1074472960,DASM_IMM,IEM_X0_Imm16,805306433,
  1074472960,DASM_IMM,IEM_X0_Imm16,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306498,1074472960,DASM_IMM,IEM_X0_Imm16,13630171,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13630171,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1076890329,
  1074472960,DASM_IMM,IEM_X0_Imm8,13629019,1074472960,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629165,1074472960,13627419,1074472960,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  1082154971,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,536874946,
  1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,IEM_X0_Imm16,
  1076887682,1074472960,DASM_IMM,IEM_X0_Imm8,764342209,1074472960,13630080,
  1074472960,13630235,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873754,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,536874946,
  1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,IEM_X0_Imm16,
  1076887682,1074472960,DASM_IMM,IEM_X0_Imm8,764342209,1074472960,13630080,
  1074472960,1076890412,1074472960,DASM_IMM,IEM_X0_Imm8,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,13630080,1074472960,1076890305,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_STOP,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890306,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_STOP,1076890307,1074472960,DASM_IMM,IEM_X0_Imm8,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_STOP,13630080,1074472960,1076890305,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890306,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,536874947,1074472960,DASM_IMM,IEM_X0_Imm16,805306563,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890307,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  536874950,1074472960,DASM_IMM,IEM_X0_Imm16,805306758,1074472960,DASM_IMM,
  IEM_X0_Imm16,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536871322,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,DASM_STOP,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629120,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629121,
  1074472960,DASM_STOP,536874950,1074472960,DASM_IMM,IEM_X0_Imm16,805306758,
  1074472960,DASM_IMM,IEM_X0_Imm16,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,DASM_STOP,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629123,1074472960,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,-266973184,671088641,
  DASM_PC,IEM_X1_Br,DASM_STOP,-266973184,671088640,DASM_PC,IEM_X1_Br,DASM_STOP,
  13627419,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627483,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,1082146779,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_STOP,536874945,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306433,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890305,1074472960,
  DASM_IMM,IEM_X0_Imm8,DASM_STOP,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306498,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890306,1074472960,
  DASM_IMM,IEM_X0_Imm8,DASM_STOP,536874969,1074472960,DASM_IMM,IEM_X0_Imm16,
  805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13630080,1074472960,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,-266973184,671088641,DASM_PC,IEM_X1_Br,DASM_STOP,-266973184,671088640,
  DASM_PC,IEM_X1_Br,DASM_STOP,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890306,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,536874947,1074472960,DASM_IMM,IEM_X0_Imm16,805306563,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,1076890307,1074472960,DASM_IMM,
  IEM_X0_Imm8,DASM_STOP,536874969,1074472960,DASM_IMM,IEM_X0_Imm16,805307993,
  1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630080,1074472960,1076890305,1074472960,DASM_IMM,IEM_X0_Imm8,
  1082134468,1074472960,DASM_IMM,IEM_X0_Imm8,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,13630171,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630171,
  1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1076890329,1074472960,DASM_IMM,
  IEM_X0_Imm8,13629019,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630080,1074472960,1076890305,1074472960,
  DASM_IMM,IEM_X0_Imm8,1076890306,1074472960,DASM_IMM,IEM_X0_Imm8,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629165,1074472960,DASM_STOP,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629120,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629124,
  1074472960,1573124,1074472960,1880510464,1074202624,13369604,1074472960,17559808,
  1074472960,1082138587,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627419,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,13630171,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630171,1074472960,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,1076890329,1074472960,DASM_IMM,IEM_X0_Imm8,13629019,1074472960,
  536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630299,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630235,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630080,
  1074472960,1082134465,1074472960,DASM_IMM,IEM_X0_Imm8,1082134466,1074472960,
  DASM_IMM,IEM_X0_Imm8,1880510464,0,DASM_IMM,IEM_X1_J_jal,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629163,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,1074472960,
  DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,536874945,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306433,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,
  1076890305,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,536874946,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,
  1076890306,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_STOP,13630080,1074472960,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,-266973184,671088641,DASM_PC,
  IEM_X1_Br,DASM_STOP,-266973184,671088640,DASM_PC,IEM_X1_Br,DASM_STOP,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629120,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629124,
  1074472960,13627393,1074472960,1589313,1074472960,-266973184,1074006048,786497,
  1074472960,-266973184,1074202656,DASM_STOP,-266973184,671088673,DASM_PC,IEM_X1_Br,
  DASM_STOP,-266973184,671088672,DASM_PC,IEM_X1_Br,DASM_STOP,-266973184,671088672,
  DASM_L,IEM_X1_Br,11,DASM_STOP,-266973184,671088673,DASM_L,IEM_X1_Br,11,DASM_STOP,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,13627419,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13627675,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13627611,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1880510464,
  0,DASM_PC,IEM_X1_J_j,DASM_LABEL_L,1,DASM_STOP,1880510464,0,DASM_PC,IEM_X1_J_j,
  DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,13627419,1074472960,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13627483,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1880510464,0,DASM_PC,
  IEM_X1_J_j,DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629121,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629122,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,
  1074472960,1880510464,0,DASM_IMM,IEM_X1_J_jal,13627419,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13627483,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627419,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627483,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,DASM_STOP,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,13631426,1074472960,13631427,1074472960,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,-266973184,671088640,DASM_L,IEM_X1_Br,
  13,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629121,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,1880510464,0,DASM_L,IEM_X1_J_j,14,DASM_LABEL_L,3,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629121,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,DASM_LABEL_L,4,DASM_STOP,-266973184,671088641,DASM_PC,
  IEM_X1_Br,DASM_STOP,13630080,1074472960,1076890305,1074472960,DASM_IMM,IEM_X0_Imm8,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,13630080,1074472960,1082134465,
  1074472960,DASM_IMM,IEM_X0_Imm8,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,1880510464,0,DASM_IMM,IEM_X1_J_jal,536874969,1074472960,DASM_IMM,
  IEM_X0_Imm16,805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,
  536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13627419,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,1082159067,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536870938,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_STOP,13627422,1074472960,13630171,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630171,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1076890329,
  1074472960,DASM_IMM,IEM_X0_Imm8,13629019,1074472960,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630080,1074472960,
  1076890305,1074472960,DASM_IMM,IEM_X0_Imm8,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  13627419,1074472960,536872858,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629163,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,-266973184,1074492237,
  13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,1074472960,
  DASM_STOP
};

# 9 "ljit_tilepro64.dasc"
//|.globals JSUB_
enum {
  JSUB_GROW_STACK,
  JSUB_GROW_CI,
  JSUB_GATE_LJ,
  JSUB_GATE_JL,
  JSUB_GATE_JC,
  JSUB__MAX
};
# 10 "ljit_tilepro64.dasc"

/* ------------------------------------------------------------------------ */
#define DASM_MAXSECTION 1

/* Arch string. */
const char luaJIT_arch[] = "tilepro64";

/* Forward declarations for C functions called from jsubs. */
static void jit_hookins(lua_State *L, const Instruction *newpc);
static void jit_gettable_fb(lua_State *L, Table *t, StkId dest);
static void jit_settable_fb(lua_State *L, Table *t, StkId val);

/* these are defined in libtile-cc */
extern double __float64_add(double,double);
extern double __float64_sub(double,double);
extern double __float64_mul(double,double);
extern double __float64_div(double,double);
extern double __float64_neg(double,double);
extern int __float64_gcc_lt(double,double);
extern int __float64_gcc_le(double,double);
extern int __float64_gcc_gt(double,double);
extern int __float64_gcc_ge(double,double);
#include <math.h>
#include <stdio.h>

// apparently got removed. using modf of a div now
double __float64_rem(double x, double y)
{
	double i;
	modf(x / y, &i);
	return x - y * i;
}

static void dumpstack(TValue* base, TValue* top, CallInfo* ci, lua_State* L, const char* opname)
{
	TValue* s;

	FILE* f = fopen("log.log","a");
	fprintf(f,"------------------------------------------------------------------------\n");
	fprintf(f," PRE-OPCODE: %s\n", opname);
	fprintf(f,"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n");
	fprintf(f," L->base = %08x\n L->top = %08x\n L->ci = %08x\n L->stack = %08x\n L->stack_last = %08x\n\n", base - L->stack, top - L->stack, (unsigned int)ci, (unsigned int)L->stack, L->stack_last - L->stack);
	fprintf(f," CI->func = %08x\n CI->base = %08x\n CI->top = %08x\n\n", ci->func - L->stack, ci->base - L->stack, ci->top - L->stack);
	fprintf(f," STACK:\n");
	for(s = L->stack; s <= L->stack_last; s++)
	{
		fprintf(f,"\t%08x | TYPE: ", s - L->stack);
		switch(s->tt)
		{
		case LUA_TNIL:
			fprintf(f,"nil\n");
			break;
		case LUA_TBOOLEAN:
			fprintf(f,"boolean: %d\n", bvalue(s));
			break;
		case LUA_TLIGHTUSERDATA:
			fprintf(f,"lightuserdata\n");
			break;
		case LUA_TNUMBER:
			fprintf(f,"number: %f\n", nvalue(s));
			break;
		case LUA_TSTRING:
			fprintf(f, "string: %s\n", getstr(rawtsvalue(s)));
			break;
		case LUA_TTABLE:
			fprintf(f, "table\n");
			break;
		case LUA_TFUNCTION:
			if(iscfunction(s))
				fprintf(f, "cfunction: %08x\n", (unsigned int)clvalue(s)->c.f);
			else
				fprintf(f, "lfunction\n");
			break;
		case LUA_TUSERDATA:
			fprintf(f, "userdata\n");
			break;
		case LUA_TTHREAD:
			fprintf(f, "thread\n");
			break;
		default:
			fprintf(f, "unknown: %d\n", s->tt);
			break;
		}
	}
	fprintf(f,"------------------------------------------------------------------------\n");
	fclose(f);
}

static void jit_emit_stackdump(jit_State *J, const char* curop_name)
{
	//|	move r0, BASE
	//|	move r1, TOP
	//|	move r2, CI
	//|	move r3, L
	//|	movewi r4, curop_name
	//|	jal &dumpstack
	dasm_put(Dst, 0, lo16(curop_name), ha16(curop_name), &dumpstack);
# 106 "ljit_tilepro64.dasc"
}

char upthere[] = "---^";

/* Detect CPU features and set JIT flags. */
static int jit_cpudetect(jit_State *J)
{
	return JIT_S_OK;
}

/* Check some assumptions. Should compile to nop. */
static int jit_consistency_check(jit_State *J)
{
/*	do {*/
		/* Force a compiler error for inconsistent structure sizes. */
		/* Check LUA_TVALUE_ALIGN in luaconf.h, too. */
/*		||int check_TVALUE_SIZE_in_ljit_x86_dash[1+TVALUE_SIZE-sizeof(TValue)];
		int check_TVALUE_SIZE_in_ljit_x86_dash_[1+sizeof(TValue)-TVALUE_SIZE];
		((void)check_TVALUE_SIZE_in_ljit_x86_dash[0]);
		((void)check_TVALUE_SIZE_in_ljit_x86_dash_[0]);
		if (LUA_TNIL != 0 || LUA_TBOOLEAN != 1 || PCRLUA != 0) break;
		if ((int)&(((Node *)0)->i_val) != (int)&(((StkId)0)->value)) break;*/
		return JIT_S_OK;
/*	} while (0);
	J->dasmstatus = 999999999;*/  /* Recognizable error. */
/*	return JIT_S_COMPILER_ERROR;*/
}

static int jit_std_prologue(jit_State *J, int stacksize)
{
	//|	prologue LUAFUNC_STACK_SIZE
	//|
	//|	addidx r9, BASE, stacksize+1
	//|	movei r1, stacksize+1
	//|	slt_u r0, r9, L->stack_last
	//|	bnz r0, >1
	//|	jal ->GROW_STACK
	//|	addidx r9, BASE, stacksize+1 // this may get overwritten by the above function call.
	//|1:
	//|	// This is a slight overallocation (BASE[1+stacksize] would be enough).
	//|	// We duplicate luaD_precall() behaviour so we can use luaD_growstack().
	//|	seq r0, CI, L->end_ci
	//|	bz r0, >2
	//|	jal ->GROW_CI			// CI overflow?
	//|	addidx r9, BASE, stacksize+1
	//|2:
	//|	addidx CI, CI, 1
	//|	move CI->top, r9
	dasm_put(Dst, 21, (stacksize+1)*sizeof(TValue), stacksize+1, lo16(Dt1(->stack_last)), ha16(Dt1(->stack_last)), (stacksize+1)*sizeof(TValue), lo16(Dt1(->end_ci)), ha16(Dt1(->end_ci)), (stacksize+1)*sizeof(TValue), (1)*sizeof(CallInfo), lo16(Dt4(->top)), ha16(Dt4(->top)));
# 154 "ljit_tilepro64.dasc"
	return 0;
}

static int jit_wipe_r8_to_TOP(jit_State *J)
{
	//|7:
	//|	setnilvalue TVALUE:r8[0]		// the new TOP is always set to NIL at this point. i don't care. it don't hurt.
	//|	addi r8, r8, #TVALUE
	//|	slt_u r0, TVALUE:r8, TOP
	//|	bnzt r0, <7
	dasm_put(Dst, 106, lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), sizeof(TValue));
# 164 "ljit_tilepro64.dasc"
	return 0;
}

/* Compile JIT subroutines (once). */
static int jit_compile_jsub(jit_State *J)
{
	int status = jit_consistency_check(J);
	if (status != JIT_S_OK) return status;
	status = jit_cpudetect(J);
	if (status != JIT_S_OK) return status;
	dasm_setup(Dst, jit_actionlist);
	//|// Macros to reorder and combine JIT subroutine definitions.
	//|.macro .jsub, name
	//|.capture JSUB			// Add the entry point.
	//||//-----------------------------------------------------------------------
	//||//->name:
	//|	.align 16
	//|->name:
	//|.endmacro
	//|.macro .endjsub;  .endcapture; .endmacro
	//|.macro .dumpjsub;  .dumpcapture JSUB; .endmacro
	//|
	//|//-----------------------------------------------------------------------
	//|// Procedure: GATE_LJ(lua_State* L, TValue* func, int nresults)
	//|// L contains the Lua state
	//|// func is the stack frame base pointer for this functions
	//|// nresults is the amount of results the caller is expecting. rest should
	//|//			be truncated
	//|//---------------------
	//|.align 64
	//|->GATE_LJ:
	//|	prologue 32
	//|	// Preserve "global type" registers.
	//|	preserveglobalregs
	//|
	//|	// Init our global types
	//|	globals_LJ_L r0
	//|	globals_LJ r1
	//|	globals_LJ_LCL BASE->value	
	//|
	//|	// Prevent stackless yield. TODO: figure out what a stackless yield is.
	//|	addi L->nCcalls, L->nCcalls, 1
	//|
	//|	// Store number of requested results.
	//|	storeonstack r2, 28
	//|
	dasm_put(Dst, 132, lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt2(->value)), ha16(Dt2(->value)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)));
# 210 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Entering LJ gate");
	//|
	//|	// Call the gate, probably not compiled yet, but may be compiled.
	//|	jalr LCL->jit_gate
	//|
	//|
	//|	// Check if arg 3 was LUA_MULTRET
	//|	loadfromstack r2, 28
	//|	seqi r0, r2, -1
	//|	bnz r0, >2		// If so, we can skip this
	//|
	//|	// Multiply number of values on stack by value size
	//|	movei r5, #TOP
	//|	mulw_uu r4, r2, r5
	//|
	//|	// Get index right above the last nresults. All
	//|	add r8, BASE, r4
	//|
	dasm_put(Dst, 227, lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)), sizeof(TValue));
# 228 "ljit_tilepro64.dasc"
	jit_wipe_r8_to_TOP(J);
	//|
	//|	move TOP, CI->top
	//|
	//|2:
	//|	addi L->nCcalls, L->nCcalls, -1
	//|
	//|	move BASE, CI->base
	//|	// Push our "fast" state to the "slow" interpreter state
	//|	globals_JL
	dasm_put(Dst, 267, lo16(Dt4(->top)), ha16(Dt4(->top)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)), lo16(Dt4(->base)), ha16(Dt4(->base)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)));
# 238 "ljit_tilepro64.dasc"
	//|
	dasm_put(Dst, 400);
# 239 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Returning from LJ gate");
	//|
	//|	// Restore "global type" registers
	//|	restoreglobalregs
	//|	movei r0, PCRC
	//|
	//|	epilogue 32
	//|	jrp lr
	//|
	//|
	//|
	//|.align 64
	//|->GATE_JL:
	//|	prologue 8
	dasm_put(Dst, 403, PCRC);
# 253 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Entering JL gate");
	//|	move PROTO:r6, LCL->p
	//|	seqi r0, PROTO:r6->jit_status, JIT_S_OK
	//|	bz r0, >1		// Already compiled?
	//|
	//|	// Yes, copy callgate...
	//|	move r5, PROTO:r6->jit_mcode
	//|	move LCL->jit_gate, r5
	//|	jr r5
	//|
	//|	// No... Compile
	//|1:
	//|	globals_JL
	dasm_put(Dst, 442, lo16(Dt5(->p)), ha16(Dt5(->p)), lo16(Dt10(->jit_status)), ha16(Dt10(->jit_status)), JIT_S_OK, lo16(Dt10(->jit_mcode)), ha16(Dt10(->jit_mcode)), lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)));
# 266 "ljit_tilepro64.dasc"
	//|	move r0, L
	//|	move r1, BASE
	//|	movei r2, -1
	//|//	sub BASE, BASE, L->stack
	//|	jal &luaD_precall
	//|	bnzt r0, >2
	//|
	//|	move r0, L
	//|	movei r1, 1
	//|	jal &luaV_execute
	dasm_put(Dst, 582, ha16(Dt1(->savedpc)), &luaD_precall, &luaV_execute);
# 276 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"After executing uncompiled function");
	//|
	//|2:
	//|//	add BASE, BASE, L->stack
	//|	globals_LJ L->base
	dasm_put(Dst, 612, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 281 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Returning from JL gate");
	//|	epilogue 8
	//|	jrp lr
	//|
	//|.align 64
	//|->GATE_JC:
	dasm_put(Dst, 651);
# 287 "ljit_tilepro64.dasc"

	jit_std_prologue(J, LUA_MINSTACK);

	jit_emit_stackdump(J,"Entering JC gate");
	//|	move CI->func, BASE
	//|	move CCLOSURE:r7, BASE->value
	//|	addidx BASE, BASE, 1
	//|	move CI->base, BASE
	//|	globals_JL
	//|
	//|	move r0, L
	//|	jalr CCLOSURE:r7->f
	dasm_put(Dst, 662, lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt2(->value)), ha16(Dt2(->value)), (1)*sizeof(TValue), lo16(Dt4(->base)), ha16(Dt4(->base)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), lo16(DtF(->f)));
# 299 "ljit_tilepro64.dasc"
	//|
	//|	globals_LJ L->base
	//|
	//|	subidx CI, CI, 1
	//|	subidx BASE, BASE, 1
	//|
	//|	// Assume retval != LUA_MULTRET for now.
	//|	movei r6, #TOP
	//|	mulw_uu r3, r0, r6
	//|
	//|	sub r8, TOP, r3
	//|	move r4, BASE
	//|	slt_u r1, r8, TOP
	//|	bz r1, >2
	//|1:
	//|	copyslot TVALUE:r4[0], TVALUE:r8[0]
	//|	addi r4, r4, #TVALUE
	//|	addi r8, r8, #TVALUE
	dasm_put(Dst, 795, ha16(DtF(->f)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), -(1)*sizeof(CallInfo), -(1)*sizeof(TValue), sizeof(TValue), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])), lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), sizeof(TValue));
# 317 "ljit_tilepro64.dasc"
	//|	slt_u r1, r8, TOP
	//|	bnzt r1, <1
	//|2:
	//|	add TOP, BASE, r3
	//|
	dasm_put(Dst, 945, sizeof(TValue));
# 322 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Returning from JC gate");
	//|	epilogue LUAFUNC_STACK_SIZE
	//|	jrp lr
	//|
	//|.align 64
	//|->GROW_STACK:
	//|	prologue 8
	//|	globals_JL_TOP
	//|	move r0, L
	//|	jal &luaD_growstack
	//|	epilogue 8
	//|	jrp lr
	//|.align 64
	//|->GROW_CI:
	//|	prologue 8
	//|	globals_JL_TOP
	//|	move r0, L
	//|	jal &luaD_growCI
	//|	epilogue 8
	//|	jrp lr
	//|.align 64
	//|//-----------------------------------------------------------------------
	dasm_put(Dst, 961, lo16(Dt1(->top)), ha16(Dt1(->top)), &luaD_growstack, lo16(Dt1(->top)), ha16(Dt1(->top)), &luaD_growCI);
# 344 "ljit_tilepro64.dasc"

	status = luaJIT_link(J, &J->jsubmcode, &J->szjsubmcode);
	if (status != JIT_S_OK)
		return status;

	/* Copy the callgates from the globals to the global state. */
	G(J->L)->jit_gateLJ = (luaJIT_GateLJ)J->jsub[JSUB_GATE_LJ];
	G(J->L)->jit_gateJL = (lua_CFunction)J->jsub[JSUB_GATE_JL];
	G(J->L)->jit_gateJC = (lua_CFunction)J->jsub[JSUB_GATE_JC];
	return JIT_S_OK;
}

# 374 "ljit_tilepro64.dasc"
/* Called before every instruction. */
static void jit_ins_start(jit_State *J)
{
	//|=>J->nextpc:
	dasm_put(Dst, 1034, J->nextpc);
# 378 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J, luaP_opnames[GET_OPCODE(*(J->nextins-1))]);
}

/* Called after the last instruction has been encoded. */
static void jit_ins_last(jit_State *J, int lastpc, int sizemfm)
{
	//|	.align 64			// Keep next section word aligned.
	//|	.space 0x16
	//|	.word 0x0000ffff			// Terminate mfm with JIT_MFM_STOP.
	//|	.space 5 // Next mcode block pointer and size.
	//|	// The previous two awords are only word, but not aword aligned.
	//|	// Copying them is easier than aligning them and adjusting mfm handling.
	dasm_put(Dst, 1036);
# 390 "ljit_tilepro64.dasc"
}


/* Encode JIT function prologue. */
static void jit_prologue(jit_State *J)
{
	Proto *pt = J->pt;
	int numparams = pt->numparams;
	int stacksize = pt->maxstacksize;

	jit_std_prologue(J, stacksize);

	//|//	move CI->func, BASE
	//|	addidx BASE, BASE, 1
	//|	move TOP, r9
	dasm_put(Dst, 1067, (1)*sizeof(TValue));
# 405 "ljit_tilepro64.dasc"

	if(!pt->is_vararg)
	{
		//|	addidx TVALUE:r8, BASE, numparams
		dasm_put(Dst, 1074, (numparams)*sizeof(TValue));
# 409 "ljit_tilepro64.dasc"
		jit_wipe_r8_to_TOP(J);
	}
# 469 "ljit_tilepro64.dasc"

# 495 "ljit_tilepro64.dasc"
}

/* Check if we can combine 'return const'. */
static int jit_return_k(jit_State *J)
{
	return 0;
# 524 "ljit_tilepro64.dasc"
}

static void jit_op_return(jit_State *J, int rbase, int nresults)
{
# 556 "ljit_tilepro64.dasc"

	/* May need to close open upvalues. */
	if (!fhint_isset(J, NOCLOSE)) {
		//|	move r0, L
		//|	move r1, BASE
		//|	jal &luaF_close
		dasm_put(Dst, 1079, &luaF_close);
# 562 "ljit_tilepro64.dasc"
	}

	/* Go to the previous CallInfo, load the current into r7 */
	//|//	move CINFO:r7, CI
	//|	subidx CI, CI, 1
	//|	subidx BASE, BASE, 1
	dasm_put(Dst, 1088, -(1)*sizeof(CallInfo), -(1)*sizeof(TValue));
# 568 "ljit_tilepro64.dasc"

	/* Previous op was open: 'return f()' or 'return ...' */
	if (nresults < 0) {
		/* TODO: Assuming CI->func is always BASE-1. Not sure if this is true. */
		//|	subidx TOP, TOP, 1
		//|	move SCRATCHTV, BASE
		//|	slt_u r0, SCRATCHTV, TOP
		//|	bz r0, >2
		//|1:
		//|	copyslot SCRATCHTV[0], SCRATCHTV[1]
		//|	addidx SCRATCHTV, SCRATCHTV, 1
		//|	slt_u r0, SCRATCHTV, TOP
		//|	bnzt r0, <1
		//|2:
		//|	setnilvalue TOP[0]
		dasm_put(Dst, 1097, -(1)*sizeof(TValue), lo16(Dt7([1].value)), ha16(Dt7([1].value)), lo16(Dt7([0].value)), ha16(Dt7([0].value)), lo16(Dt7([1].value.na[1])), ha16(Dt7([1].value.na[1])), lo16(Dt7([0].value.na[1])), ha16(Dt7([0].value.na[1])), lo16(Dt7([1].tt)), ha16(Dt7([1].tt)), lo16(Dt7([0].tt)), ha16(Dt7([0].tt)), (1)*sizeof(TValue), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)));
# 603 "ljit_tilepro64.dasc"
	}
	else
	{
		int i;
		for(i = 0; i < nresults; i++)
		{
			//|	copyslot BASE[i], BASE[rbase+i+1]
			dasm_put(Dst, 1204, lo16(Dt2([rbase+i+1].value)), ha16(Dt2([rbase+i+1].value)), lo16(Dt2([i].value)), ha16(Dt2([i].value)), lo16(Dt2([rbase+i+1].value.na[1])), ha16(Dt2([rbase+i+1].value.na[1])), lo16(Dt2([i].value.na[1])), ha16(Dt2([i].value.na[1])), lo16(Dt2([rbase+i+1].tt)), ha16(Dt2([rbase+i+1].tt)), lo16(Dt2([i].tt)), ha16(Dt2([i].tt)));
# 610 "ljit_tilepro64.dasc"
		}
		//|	addidx TVALUE:r8, BASE, nresults
		dasm_put(Dst, 1271, (nresults)*sizeof(TValue));
# 612 "ljit_tilepro64.dasc"
		jit_wipe_r8_to_TOP(J);
		//|	addidx TOP, BASE, nresults
		dasm_put(Dst, 1276, (nresults)*sizeof(TValue));
# 614 "ljit_tilepro64.dasc"
	}

	jit_emit_stackdump(J,"After RETURN");

	//|	epilogue LUAFUNC_STACK_SIZE
	//|	jrp lr
	dasm_put(Dst, 1281);
# 620 "ljit_tilepro64.dasc"
}

static void jit_op_call(jit_State *J, int func, int nargs, int nresults)
{
# 628 "ljit_tilepro64.dasc"
	//|	addidx BASE, BASE, func
	//|//  move CI, L->ci
	//|//   isfunction 0			// BASE[0] is L->base[func].
	dasm_put(Dst, 1288, (func)*sizeof(TValue));
# 631 "ljit_tilepro64.dasc"
	if (nargs >= 0) {  /* Previous op was not open and did not set TOP. */
		//|	addidx TOP, BASE, nargs+1
		dasm_put(Dst, 1293, (nargs+1)*sizeof(TValue));
# 633 "ljit_tilepro64.dasc"
	}
	//|	move LCL, BASE->value
	//|	movemwi CI->savedpc, J->nextins
# 662 "ljit_tilepro64.dasc"
	//|	jalr LCL->jit_gate		// Call JIT func or GATE_JL/GATE_JC.
	dasm_put(Dst, 1298, lo16(Dt2(->value)), ha16(Dt2(->value)), lo16(J->nextins), ha16(J->nextins), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)));
# 682 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J,"Before return from call");
	if (nresults >= 0) {
		//|	move TOP, CI->top
		dasm_put(Dst, 1343, lo16(Dt4(->top)), ha16(Dt4(->top)));
# 685 "ljit_tilepro64.dasc"
	}
	//|	subidx BASE, BASE, func
	//|	move LCL, BASE[-1].value
	dasm_put(Dst, 1356, -(func)*sizeof(TValue), lo16(Dt2([-1].value)), ha16(Dt2([-1].value)));
# 688 "ljit_tilepro64.dasc"
}


static void jit_op_tailcall(jit_State *J, int func, int nargs)
{
# 792 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_move(jit_State *J, int dest, int src)
{
	//|	copyslot BASE[dest], BASE[src]
	dasm_put(Dst, 1373, lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 799 "ljit_tilepro64.dasc"
}

static void jit_op_loadk(jit_State *J, int dest, int kidx)
{
	const TValue *kk = &J->pt->k[kidx];
	int rk = jit_return_k(J);
	if (rk) dest = 0;
	//|	movewi r1, kk
	//|	copyslot BASE[dest], TVALUE:r1[0]
	dasm_put(Dst, 1440, lo16(kk), ha16(kk), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 808 "ljit_tilepro64.dasc"
	if (rk) {
		//|	jrp lr
		dasm_put(Dst, 1515);
# 810 "ljit_tilepro64.dasc"
	}
}

static void jit_op_loadnil(jit_State *J, int first, int last)
{
	int i;
	for(i = first; i <= last; i++)
	{
		//|	setnilvalue BASE[i]
		dasm_put(Dst, 1518, lo16(Dt2([i].tt)), ha16(Dt2([i].tt)));
# 819 "ljit_tilepro64.dasc"
	}
}

static void jit_op_loadbool(jit_State *J, int dest, int b, int dojump)
{
	//|	setbvalue BASE[dest], b
	if (b) {  /* true */
	dasm_put(Dst, 1531, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
	} else {  /* false */
	dasm_put(Dst, 1558, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
	}
# 825 "ljit_tilepro64.dasc"
	if (dojump) {
		//|	j =>J->nextpc+1
		dasm_put(Dst, 1583, J->nextpc+1);
# 827 "ljit_tilepro64.dasc"
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_getupval(jit_State *J, int dest, int uvidx)
{
	//|	move UPVAL:r7, LCL->upvals[uvidx]
	//|	move TVALUE:r5, UPVAL:r7->v
	//|	copyslot BASE[dest], TVALUE:r5[0]
	dasm_put(Dst, 1588, lo16(Dt5(->upvals[uvidx])), ha16(Dt5(->upvals[uvidx])), lo16(Dt11(->v)), ha16(Dt11(->v)), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 837 "ljit_tilepro64.dasc"
}

static void jit_op_setupval(jit_State *J, int src, int uvidx)
{
	//|	move UPVAL:r1, LCL->upvals[uvidx]
	//|	move TVALUE:r5, UPVAL:r1->v
	//|	copyslot TVALUE:r5[0], BASE[src]
	//|	movei r0, LUA_TSTRING
	//|	slte_u r8, r0, TVALUE:r5->tt
	//|	bz r8, >5
	//|4:
	//|	move GCOBJECT:r2, BASE[src].value
	//|	andi r3, GCOBJECT:r2->gch.marked, WHITEBITS	// && iswhite(val)
	//|	bz r3, >5
	dasm_put(Dst, 1679, lo16(Dt5(->upvals[uvidx])), ha16(Dt5(->upvals[uvidx])), lo16(Dt11(->v)), ha16(Dt11(->v)), lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])), lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt9([0].tt)), ha16(Dt9([0].tt)), lo16(Dt9(->tt)), ha16(Dt9(->tt)), lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(DtC(->gch.marked)), ha16(DtC(->gch.marked)), WHITEBITS);
# 851 "ljit_tilepro64.dasc"
	//|	andi r4, UPVAL:r1->marked, bitmask(BLACKBIT)	// && isblack(uv)
	//|	bz r4, >5
	//|	move r0, L
	//|	jal &luaC_barrierf
	//|5:
	dasm_put(Dst, 1817, lo16(Dt11(->marked)), ha16(Dt11(->marked)), bitmask(BLACKBIT), &luaC_barrierf);
# 856 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

/* Optimized table lookup routines. Enter via jsub, fallback to C. */

/* Fallback for GETTABLE_*. Temporary key is in L->env. */
static void jit_gettable_fb(lua_State *L, Table *t, StkId dest)
{
# 976 "ljit_tilepro64.dasc"
}

/* Fallback for SETTABLE_*STR. Temporary (string) key is in L->env. */
static void jit_settable_fb(lua_State *L, Table *t, StkId val)
{
# 1115 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_newtable(jit_State *J, int dest, int lnarray, int lnhash)
{
	//|	move r0, L
	//|	movewi r1, luaO_fb2int(lnarray)
	//|	movewi r2, luaO_fb2int(lnhash)
	//|	globals_JL
	//|	jal &luaH_new
	//|	globals_LJ L->base
	dasm_put(Dst, 1850, lo16(luaO_fb2int(lnarray)), ha16(luaO_fb2int(lnarray)), lo16(luaO_fb2int(lnhash)), ha16(luaO_fb2int(lnhash)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaH_new, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)));
# 1127 "ljit_tilepro64.dasc"
	//|	sethvaluer BASE[dest], r0
	dasm_put(Dst, 1975, ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 1128 "ljit_tilepro64.dasc"
/* TODO	jit_checkGC(J);*/
}

static void jit_op_getglobal(jit_State *J, int dest, int kidx)
{
	/* At this point, we just do a call to the Lua getfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	//|	movewi TSTRING:r2, &kk->value.gc->ts
	//|	addi r2, r2, #TSTRING
	//|	moveli r1, -10002	// LUA_GLOBALSINDEX
	//|	move r0, L
	//|
	//|	// lua_getfield puts something on the stack top, so set L->top
	//|	globals_JL_TOP
	//|	jal &lua_getfield
	//|
	//|	// Take the TValue that fell out of it and move to R(dest)
	//|	copyslot BASE[dest], TOP[0]
	dasm_put(Dst, 2020, lo16(&kk->value.gc->ts), ha16(&kk->value.gc->ts), sizeof(TString), lo16(Dt1(->top)), ha16(Dt1(->top)), &lua_getfield, lo16(Dt3([0].value)), ha16(Dt3([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt3([0].value.na[1])), ha16(Dt3([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 1147 "ljit_tilepro64.dasc"
}

static void jit_op_setglobal(jit_State *J, int rval, int kidx)
{
	/* At this point, we just do a call to the Lua setfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	//|	movewi TSTRING:r2, &kk->value.gc->ts
	//|	addi r2, r2, #TSTRING
	//|	moveli r1, -10002	// LUA_GLOBALSINDEX
	//|	move r0, L
	//|
	//|	addidx TOP, TOP, 1
	//|	copyslot TOP[0], BASE[rval]
	//|
	//|	// lua_setfield gets something from the stack top, so set L->top
	//|	globals_JL_TOP
	//|	jal &lua_setfield
	//|
	dasm_put(Dst, 2119, lo16(&kk->value.gc->ts), ha16(&kk->value.gc->ts), sizeof(TString), (1)*sizeof(TValue), lo16(Dt2([rval].value)), ha16(Dt2([rval].value)), lo16(Dt3([0].value)), ha16(Dt3([0].value)), lo16(Dt2([rval].value.na[1])), ha16(Dt2([rval].value.na[1])), lo16(Dt3([0].value.na[1])), ha16(Dt3([0].value.na[1])), lo16(Dt2([rval].tt)), ha16(Dt2([rval].tt)), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)), lo16(Dt1(->top)), ha16(Dt1(->top)), &lua_setfield);
# 1166 "ljit_tilepro64.dasc"
}

enum { TKEY_KSTR = -2, TKEY_STR = -1, TKEY_ANY = 0 };

/* Optimize key lookup depending on consts or hints type. */
static int jit_keylookup(jit_State *J, int tab, int rkey)
{
# 1232 "ljit_tilepro64.dasc"
	return TKEY_ANY;  /* Use fallback. */
}

static void jit_op_gettable(jit_State *J, int dest, int tab, int rkey)
{
	//|	move r0, L
	//|	addidx r1, BASE, tab
	dasm_put(Dst, 2222, (tab)*sizeof(TValue));
# 1239 "ljit_tilepro64.dasc"
	if(ISK(rkey))
	{
		//|	movewi r2, &J->pt->k[INDEXK(rkey)]
		dasm_put(Dst, 2229, lo16(&J->pt->k[INDEXK(rkey)]), ha16(&J->pt->k[INDEXK(rkey)]));
# 1242 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r2, BASE, rkey
		dasm_put(Dst, 2238, (rkey)*sizeof(TValue));
# 1246 "ljit_tilepro64.dasc"
	}
	//|	addidx r3, BASE, dest
	//|	jal &luaV_gettable
	dasm_put(Dst, 2243, (dest)*sizeof(TValue), &luaV_gettable);
# 1249 "ljit_tilepro64.dasc"


# 1332 "ljit_tilepro64.dasc"
}

static void jit_op_settable(jit_State *J, int tab, int rkey, int rval)
{
	//|	move r0, L
	//|	addidx r1, BASE, tab
	dasm_put(Dst, 2252, (tab)*sizeof(TValue));
# 1338 "ljit_tilepro64.dasc"
	if(ISK(rkey))
	{
		//|	movewi r2, &J->pt->k[INDEXK(rkey)]
		dasm_put(Dst, 2259, lo16(&J->pt->k[INDEXK(rkey)]), ha16(&J->pt->k[INDEXK(rkey)]));
# 1341 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r2, BASE, rkey
		dasm_put(Dst, 2268, (rkey)*sizeof(TValue));
# 1345 "ljit_tilepro64.dasc"
	}
	if(ISK(rval))
	{
		//|	movewi r3, &J->pt->k[INDEXK(rval)]
		dasm_put(Dst, 2273, lo16(&J->pt->k[INDEXK(rval)]), ha16(&J->pt->k[INDEXK(rval)]));
# 1349 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r3, BASE, rval
		dasm_put(Dst, 2282, (rval)*sizeof(TValue));
# 1353 "ljit_tilepro64.dasc"
	}
	//|	jal &luaV_settable
	dasm_put(Dst, 2287, &luaV_settable);
# 1450 "ljit_tilepro64.dasc"
}

static void jit_op_self(jit_State *J, int dest, int tab, int rkey)
{
	//|	copyslot BASE[dest+1], BASE[tab]
	dasm_put(Dst, 2292, lo16(Dt2([tab].value)), ha16(Dt2([tab].value)), lo16(Dt2([dest+1].value)), ha16(Dt2([dest+1].value)), lo16(Dt2([tab].value.na[1])), ha16(Dt2([tab].value.na[1])), lo16(Dt2([dest+1].value.na[1])), ha16(Dt2([dest+1].value.na[1])), lo16(Dt2([tab].tt)), ha16(Dt2([tab].tt)), lo16(Dt2([dest+1].tt)), ha16(Dt2([dest+1].tt)));
# 1455 "ljit_tilepro64.dasc"
	jit_op_gettable(J, dest, tab, rkey);
}

/* ------------------------------------------------------------------------ */

static void jit_op_setlist(jit_State *J, int ra, int num, int batch)
{
# 1528 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_arith(jit_State *J, int dest, int rkb, int rkc, int ev)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	const Value *kval;
	int idx, rev;
	int target = (ev == TM_LT || ev == TM_LE) ? jit_jmp_target(J) : 0;
# 1542 "ljit_tilepro64.dasc"
	/* The bytecode compiler already folds constants except for: k/0, k%0, */
	/* NaN results, k1<k2, k1<=k2. No point in optimizing these cases. */
	if (ISK(rkb&rkc)) goto fallback;

	/* Avoid optimization when non-numeric constants are present. */
	if (kkb ? !ttisnumber(kkb) : (kkc && !ttisnumber(kkc))) goto fallback;

# 1557 "ljit_tilepro64.dasc"

	/* Load operands */
	if(kkb)
	{
		//|	movewi r6, kkb
		//|	loadnumber r0, r1, TVALUE:r6[0]
		dasm_put(Dst, 2359, lo16(kkb), ha16(kkb), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])));
# 1563 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	loadnumber r0, r1, BASE[rkb]
		dasm_put(Dst, 2392, lo16(Dt2([rkb].value)), ha16(Dt2([rkb].value)), lo16(Dt2([rkb].value.na[1])), ha16(Dt2([rkb].value.na[1])));
# 1567 "ljit_tilepro64.dasc"
	}

	if(kkc)
	{
		//|	movewi r6, kkc
		//|	loadnumber r2, r3, TVALUE:r6[0]
		dasm_put(Dst, 2417, lo16(kkc), ha16(kkc), lo16(Dt9([0].value)), ha16(Dt9([0].value)), lo16(Dt9([0].value.na[1])), ha16(Dt9([0].value.na[1])));
# 1573 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	loadnumber r2, r3, BASE[rkc]
		dasm_put(Dst, 2450, lo16(Dt2([rkc].value)), ha16(Dt2([rkc].value)), lo16(Dt2([rkc].value.na[1])), ha16(Dt2([rkc].value.na[1])));
# 1577 "ljit_tilepro64.dasc"
	}

	/* Encode arithmetic operation. */
	switch (ev) {
	case TM_ADD:
		//|	jal &__float64_add
		dasm_put(Dst, 2475, &__float64_add);
# 1583 "ljit_tilepro64.dasc"
		break;
	case TM_SUB:
		//|	jal &__float64_sub
		dasm_put(Dst, 2480, &__float64_sub);
# 1586 "ljit_tilepro64.dasc"
		break;
	case TM_MUL:
		//|	jal &__float64_mul
		dasm_put(Dst, 2485, &__float64_mul);
# 1589 "ljit_tilepro64.dasc"
		break;
	case TM_DIV:
		//|	jal &__float64_div
		dasm_put(Dst, 2490, &__float64_div);
# 1592 "ljit_tilepro64.dasc"
		break;
	case TM_MOD:
		//|	jal &__float64_rem
		dasm_put(Dst, 2495, &__float64_rem);
# 1595 "ljit_tilepro64.dasc"
		break;
	case TM_POW:
		//|	jal &pow
		dasm_put(Dst, 2500, &pow);
# 1598 "ljit_tilepro64.dasc"
		break;
	case TM_UNM:
		//|	jal &__float64_neg
		dasm_put(Dst, 2505, &__float64_neg);
# 1601 "ljit_tilepro64.dasc"
		break;
	case TM_LT:
		//|	jal &__float64_gcc_lt
		dasm_put(Dst, 2510, &__float64_gcc_lt);
# 1604 "ljit_tilepro64.dasc"
		break;
	case TM_LE:
		//|	jal &__float64_gcc_le
		dasm_put(Dst, 2515, &__float64_gcc_le);
# 1607 "ljit_tilepro64.dasc"
		break;
	default:
		break;
	}
fpstore:
	if(ev == TM_LT || ev == TM_LE) {
		if(dest) {
			//|	bnz r0, =>target
			dasm_put(Dst, 2520, target);
# 1615 "ljit_tilepro64.dasc"
		}
		else {
			//|	bz r0, =>target
			dasm_put(Dst, 2525, target);
# 1618 "ljit_tilepro64.dasc"
		}
	}
	else {
		/* Store result and set result type (if necessary). */
		//|	storenumber BASE[dest], r0, r1
		dasm_put(Dst, 2530, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])));
# 1623 "ljit_tilepro64.dasc"
		if (dest != rkb && dest != rkc) {
			//|	settti BASE[dest], LUA_TNUMBER
			dasm_put(Dst, 2555, lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 1625 "ljit_tilepro64.dasc"
		}
	}
	return;
fallback:

	if (target) {  /* TM_LT or TM_LE. */
		if (kkb) {
			//|	movewi r1, kkb
			dasm_put(Dst, 2568, lo16(kkb), ha16(kkb));
# 1633 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r1, BASE, rkb
			dasm_put(Dst, 2577, (rkb)*sizeof(TValue));
# 1635 "ljit_tilepro64.dasc"
		}
		if (kkc) {
			//|	movewi r2, kkc
			dasm_put(Dst, 2582, lo16(kkc), ha16(kkc));
# 1638 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r2, BASE, rkc
			dasm_put(Dst, 2591, (rkc)*sizeof(TValue));
# 1640 "ljit_tilepro64.dasc"
		}
		//|	movemwi L->savedpc, J->nextins+1
		//|	move r0, L
		//|	jal ev==TM_LT?&luaV_lessthan:&luaV_lessequal
		dasm_put(Dst, 2596, lo16(J->nextins+1), ha16(J->nextins+1), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), ev==TM_LT?&luaV_lessthan:&luaV_lessequal);
# 1644 "ljit_tilepro64.dasc"
		if (dest) {  /* cond */
			//|	bnz r0, =>target
			dasm_put(Dst, 2623, target);
# 1646 "ljit_tilepro64.dasc"
		} else {
			//|	bz r0, =>target
			dasm_put(Dst, 2628, target);
# 1648 "ljit_tilepro64.dasc"
		}
	} else {
		if (kkb) {
			//|	movewi r2, kkb
			dasm_put(Dst, 2633, lo16(kkb), ha16(kkb));
# 1652 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r2, BASE, rkb
			dasm_put(Dst, 2642, (rkb)*sizeof(TValue));
# 1654 "ljit_tilepro64.dasc"
		}
		if (kkc) {
			//|	movewi r3, kkc
			dasm_put(Dst, 2647, lo16(kkc), ha16(kkc));
# 1657 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r3, BASE, rkc
			dasm_put(Dst, 2656, (rkc)*sizeof(TValue));
# 1659 "ljit_tilepro64.dasc"
		}
		//|	movemwi L->savedpc, J->nextins
		//|	move r0, L
		//|	addidx r1, BASE, dest
		//|	movei r4, ev
		//|	jal &luaV_arith
		dasm_put(Dst, 2661, lo16(J->nextins), ha16(J->nextins), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (dest)*sizeof(TValue), ev, &luaV_arith);
# 1665 "ljit_tilepro64.dasc"
	}
}

/* ------------------------------------------------------------------------ */

static void jit_fallback_len(lua_State *L, StkId ra, const TValue *rb)
{
	switch (ttype(rb)) {
	case LUA_TTABLE:
		setnvalue(ra, cast_num(luaH_getn(hvalue(rb))));
		break;
	case LUA_TSTRING:
		setnvalue(ra, cast_num(tsvalue(rb)->len));
		break;
	default: {
		const TValue *tm = luaT_gettmbyobj(L, rb, TM_LEN);
		if (ttisfunction(tm)) {
			ptrdiff_t rasave = savestack(L, ra);
			setobj2s(L, L->top, tm);
			setobj2s(L, L->top+1, rb);
			luaD_checkstack(L, 2);
			L->top += 2;
			luaD_call(L, L->top - 2, 1);
			ra = restorestack(L, rasave);
			L->top--;
			setobjs2s(L, ra, L->top);
		} else {
			luaG_typeerror(L, rb, "get length of");
		}
		break;
	}
	}
}

static void jit_op_len(jit_State *J, int dest, int rb)
{
	//|	globals_JL
	//|	move r0, L
	//|	addidx r1, BASE, dest
	//|	addidx r2, BASE, rb
	//|	jal &jit_fallback_len
	//|	globals_LJ L->base
	dasm_put(Dst, 2696, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (dest)*sizeof(TValue), (rb)*sizeof(TValue), &jit_fallback_len, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)));
	dasm_put(Dst, 2825, ha16(Dt1(->ci)));
# 1738 "ljit_tilepro64.dasc"
}

static void jit_op_not(jit_State *J, int dest, int rb)
{
	/* l_isfalse() without a branch -- truly devious. */
	/* ((value & tt) | (tt>>1)) is only zero for nil/false. */
	/* Assumes: LUA_TNIL == 0, LUA_TBOOLEAN == 1, bvalue() == 0/1 */
	//|	move r0, BASE[rb].tt
	//|	move r4, BASE[rb].value
	//|	and r4, r4, r0
	//|	shri r0, r0, 1
	//|	or r4, r4, r0
	//|	seq r0, r4, zero
	//|	movei BASE[dest].tt, LUA_TBOOLEAN
	//|	move BASE[dest].value, r0
	dasm_put(Dst, 2834, lo16(Dt2([rb].tt)), ha16(Dt2([rb].tt)), lo16(Dt2([rb].value)), ha16(Dt2([rb].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)));
# 1753 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_concat(jit_State *J, int dest, int first, int last)
{
	//|	globals_JL
	//|	move r0, L
	//|	movei r1, last-first+1   // GRAY ASSUME: !(last > 255)
	//|	movei r2, last
	//|	jal &luaV_concat
	//|	globals_LJ L->base
	dasm_put(Dst, 2891, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), last-first+1, last, &luaV_concat, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)));
	dasm_put(Dst, 3020, ha16(Dt1(->ci)));
# 1765 "ljit_tilepro64.dasc"
	if(dest != first)
	{
		//|	copyslot BASE[dest], BASE[first]
		dasm_put(Dst, 3029, lo16(Dt2([first].value)), ha16(Dt2([first].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([first].value.na[1])), ha16(Dt2([first].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt2([first].tt)), ha16(Dt2([first].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 1768 "ljit_tilepro64.dasc"
	}
	/* TODO: jit_checkGC(J); */
# 1846 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_eq(jit_State *J, int cond, int rkb, int rkc)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	int target = jit_jmp_target(J);
# 1940 "ljit_tilepro64.dasc"
	if (kkb) {
		//|	movewi r1, kkb
		dasm_put(Dst, 3096, lo16(kkb), ha16(kkb));
# 1942 "ljit_tilepro64.dasc"
	} else {
		//|	addidx r1, BASE, rkb
		dasm_put(Dst, 3105, (rkb)*sizeof(TValue));
# 1944 "ljit_tilepro64.dasc"
	}
	if (kkc) {
		//|	movewi r2, kkc
		dasm_put(Dst, 3110, lo16(kkc), ha16(kkc));
# 1947 "ljit_tilepro64.dasc"
	} else {
		//|	addidx r2, BASE, rkc
		dasm_put(Dst, 3119, (rkc)*sizeof(TValue));
# 1949 "ljit_tilepro64.dasc"
	}

	//|	move r0, L
	//|	jal &luaV_equalval
	dasm_put(Dst, 3124, &luaV_equalval);
# 1953 "ljit_tilepro64.dasc"

	if(cond) {
		//|	bnz r0, =>target
		dasm_put(Dst, 3131, target);
# 1956 "ljit_tilepro64.dasc"
	}
	else {
		//|	bz r0, =>target
		dasm_put(Dst, 3136, target);
# 1959 "ljit_tilepro64.dasc"
	}
}


/* ------------------------------------------------------------------------ */

static void jit_op_test(jit_State *J, int cond, int dest, int src)
{
	int target = jit_jmp_target(J);

	/* l_isfalse() without a branch. But this time preserve tt/value. */
	/* (((value & tt) * 2 + tt) >> 1) is only zero for nil/false. */
	/* Assumes: 3*tt < 2^32, LUA_TNIL == 0, LUA_TBOOLEAN == 1, bvalue() == 0/1 */
	//|	move r0, BASE[src].tt
	//|	move r4, BASE[src].value
	//|	move r1, r0
	//|	and r1, r1, r4
	//|	shli r1, r1, 1
	//|	add r1, r1, r0
	//|	shri r1, r1, 1
	dasm_put(Dst, 3141, lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt2([src].value)), ha16(Dt2([src].value)));
# 1979 "ljit_tilepro64.dasc"

	/* Check if we can omit the stack copy. */
	if (dest == src) {  /* Yes, invert branch condition. */
		if (cond) {
			//|	bnz r1, =>target
			dasm_put(Dst, 3176, target);
# 1984 "ljit_tilepro64.dasc"
		} else {
			//|	bz r1, =>target
			dasm_put(Dst, 3181, target);
# 1986 "ljit_tilepro64.dasc"
		}
	} else {  /* No, jump around copy code. */
		if (cond) {
			//|	bz r1, >1
			dasm_put(Dst, 3186);
# 1990 "ljit_tilepro64.dasc"
		} else {
			//|	bnz r1, >1
			dasm_put(Dst, 3192);
# 1992 "ljit_tilepro64.dasc"
		}
		//|	move r3, BASE[src].value.na[1]
		//|	move BASE[dest].tt, r0
		//|	move BASE[dest].value, r4
		//|	move BASE[dest].value.na[1], r3
		//|	j =>target
		//|1:
		dasm_put(Dst, 3198, lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), target);
# 1999 "ljit_tilepro64.dasc"
	}
}

static void jit_op_jmp(jit_State *J, int target)
{
	//|	j =>target
	dasm_put(Dst, 3253, target);
# 2005 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

enum { FOR_IDX, FOR_LIM, FOR_STP, FOR_EXT };

static const char *const jit_for_coerce_error[] = {
	LUA_QL("for") " initial value must be a number",
	LUA_QL("for") " limit must be a number",
	LUA_QL("for") " step must be a number",
};

/* Try to coerce for slots with strings to numbers in place or complain. */
static void jit_for_coerce(lua_State *L, TValue *o)
{
	int i;
	for (i = FOR_IDX; i <= FOR_STP; i++, o++) {
		lua_Number num;
		if (ttisnumber(o)) continue;
		if (ttisstring(o) && luaO_str2d(svalue(o), &num)) {
			setnvalue(o, num);
		} else {
			luaG_runerror(L, jit_for_coerce_error[i]);
		}
	}
}

static void jit_op_forprep(jit_State *J, int ra, int target)
{
	//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	//|	loadnumber r2, r3, BASE[ra+FOR_STP]
	//|	jal &__float64_sub
	//|	storenumber BASE[ra+FOR_IDX], r0, r1
	//|	j =>target
	dasm_put(Dst, 3258, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_sub, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), target);
# 2083 "ljit_tilepro64.dasc"
}

static void jit_op_forloop(jit_State *J, int ra, int target)
{
	//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	//|	loadnumber r2, r3, BASE[ra+FOR_STP]
	//|	jal &__float64_add
	//|	storenumber BASE[ra+FOR_IDX], r0, r1
	//|	storenumber BASE[ra+FOR_EXT], r0, r1
	dasm_put(Dst, 3339, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_add, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_EXT].value)), ha16(Dt2([ra+FOR_EXT].value)), lo16(Dt2([ra+FOR_EXT].value.na[1])), ha16(Dt2([ra+FOR_EXT].value.na[1])));
# 2092 "ljit_tilepro64.dasc"
	const TValue *step = hint_getpc(J, FOR_STEP_K, target-1);
	if (ttisnumber(step)) {
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		dasm_put(Dst, 3440, lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])));
# 2095 "ljit_tilepro64.dasc"
		if(nvalue(step) < (lua_Number)0) {
			//|	jal &__float64_gcc_ge
			dasm_put(Dst, 3465, &__float64_gcc_ge);
# 2097 "ljit_tilepro64.dasc"
		}
		else {
			//|	jal &__float64_gcc_le
			dasm_put(Dst, 3470, &__float64_gcc_le);
# 2100 "ljit_tilepro64.dasc"
		}
	}
	else {
		//|	loadnumber r0, r1, BASE[ra+FOR_STP]
		//|	move r2, zero
		//|	move r3, zero
		//|	jal &__float64_gcc_lt
		//|	bz r0, >3
		//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		//|	jal &__float64_gcc_ge
		//|	j >4
		//|3:
		//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		//|	jal &__float64_gcc_le
		//|4:
		dasm_put(Dst, 3475, lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_gcc_lt, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])), &__float64_gcc_ge, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])), &__float64_gcc_le);
# 2117 "ljit_tilepro64.dasc"
	}
	
	//|	bnz r0, =>target
	dasm_put(Dst, 3626, target);
# 2120 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_tforloop(jit_State *J, int ra, int nresults)
{
# 2139 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_close(jit_State *J, int ra)
{
	//|	move r0, L
	//|	addidx r1, BASE, ra
    //|	jal &luaF_close
    dasm_put(Dst, 3631, (ra)*sizeof(TValue), &luaF_close);
# 2148 "ljit_tilepro64.dasc"
}


static void jit_op_closure(jit_State *J, int dest, int ptidx)
{
	Proto *npt = J->pt->p[ptidx];
	int nup = npt->nups;
	const Instruction* pc = J->nextins;
	int j = 0;
	
	//|	move r0, L
	//|	movei r1, nup
	//|	move r2, LCL->env
	//|	jal &luaF_newLclosure
	//|	movemwi LCL:r0->p, npt			// Store new proto in returned closure.
	//|	setclvaluer BASE[dest], r0
	dasm_put(Dst, 3642, nup, lo16(Dt5(->env)), ha16(Dt5(->env)), &luaF_newLclosure, lo16(npt), ha16(npt), lo16(Dt5(->p)), ha16(Dt5(->p)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 2164 "ljit_tilepro64.dasc"
	for (j=0; j<nup; j++, pc++) {
		if (GET_OPCODE(*pc) == OP_GETUPVAL)
			//|	move LCL:r0->upvals[j], LCL->upvals[GETARG_B(*pc)]
			dasm_put(Dst, 3709, lo16(Dt5(->upvals[GETARG_B(*pc)])), ha16(Dt5(->upvals[GETARG_B(*pc)])), lo16(Dt5(->upvals[j])), ha16(Dt5(->upvals[j])));
# 2167 "ljit_tilepro64.dasc"
		else {
			//|//lua_assert(GET_OPCODE(*pc) == OP_MOVE);
			//|	move r30, r0
			//|	globals_JL
			//|	move r0, L
			//|	addidx r1, BASE, GETARG_B(*pc)
			//|	jal &luaF_findupval
			//|	move LCL:r30->upvals[j], UPVAL:r0
			//|	globals_LJ L->base
			dasm_put(Dst, 3732, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt4(->base)), ha16(Dt4(->base)), -(1)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (GETARG_B(*pc))*sizeof(TValue), &luaF_findupval, lo16(Dt5(->upvals[j])), ha16(Dt5(->upvals[j])), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)));
			dasm_put(Dst, 3863, lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 2176 "ljit_tilepro64.dasc"
		}
	}
	J->combine += nup;
# 2216 "ljit_tilepro64.dasc"
	/* TODO jit_checkGC(J); */
}

/* ------------------------------------------------------------------------ */

static void jit_op_vararg(jit_State *J, int dest, int num)
{
# 2290 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

void luaJIT_debugnotify(jit_State *J)
{
}

