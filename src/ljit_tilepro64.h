/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.1.4, DynASM tilepro64 version 0.0.2
** DO NOT EDIT! The original file is in "ljit_tilepro64.dasc".
*/

#if DASM_VERSION != 10104
#error "Version mismatch between DynASM and included encoding engine"
#endif

# 1 "ljit_tilepro64.dasc"
/*
 * Random shit
 */

//|.include ljit_tilepro64.dash
# 1 "ljit_tilepro64.dash"
//|.arch tilepro64
//|
//|// Types
//|.type L,		lua_State,	r42
#define Dt1(_V) (int)&(((lua_State *)0)_V)
# 5 "ljit_tilepro64.dash"
//|.type BASE,	TValue,		r43
#define Dt2(_V) (int)&(((TValue *)0)_V)
# 6 "ljit_tilepro64.dash"
//|.type TOP,		TValue,		r44
#define Dt3(_V) (int)&(((TValue *)0)_V)
# 7 "ljit_tilepro64.dash"
//|.type CI,		CallInfo,	r45
#define Dt4(_V) (int)&(((CallInfo *)0)_V)
# 8 "ljit_tilepro64.dash"
//|.type LCL,		LClosure,	r46
#define Dt5(_V) (int)&(((LClosure *)0)_V)
# 9 "ljit_tilepro64.dash"
//|.type CTOP,	TValue,		r47
#define Dt6(_V) (int)&(((TValue *)0)_V)
# 10 "ljit_tilepro64.dash"
//|
//|// Types
//|.type GL,			global_State
#define Dt7(_V) (int)&(((global_State *)0)_V)
# 13 "ljit_tilepro64.dash"
//|.type TVALUE,		TValue
#define Dt8(_V) (int)&(((TValue *)0)_V)
# 14 "ljit_tilepro64.dash"
//|.type VALUE,		Value
#define Dt9(_V) (int)&(((Value *)0)_V)
# 15 "ljit_tilepro64.dash"
//|.type CINFO,		CallInfo
#define DtA(_V) (int)&(((CallInfo *)0)_V)
# 16 "ljit_tilepro64.dash"
//|.type GCOBJECT,	GCObject
#define DtB(_V) (int)&(((GCObject *)0)_V)
# 17 "ljit_tilepro64.dash"
//|.type TSTRING,		TString
#define DtC(_V) (int)&(((TString *)0)_V)
# 18 "ljit_tilepro64.dash"
//|.type TABLE,		Table
#define DtD(_V) (int)&(((Table *)0)_V)
# 19 "ljit_tilepro64.dash"
//|.type CCLOSURE,	CClosure
#define DtE(_V) (int)&(((CClosure *)0)_V)
# 20 "ljit_tilepro64.dash"
//|.type PROTO,		Proto
#define DtF(_V) (int)&(((Proto *)0)_V)
# 21 "ljit_tilepro64.dash"
//|.type UPVAL,		UpVal
#define Dt10(_V) (int)&(((UpVal *)0)_V)
# 22 "ljit_tilepro64.dash"
//|.type NODE,		Node
#define Dt11(_V) (int)&(((Node *)0)_V)
# 23 "ljit_tilepro64.dash"
//|
//|// Definitions copied to DynASM domain to avoid unnecessary constant args.
//|// CHECK: must match with the definitions in lua.h!
//|.define LUA_TNIL,				0
//|.define LUA_TBOOLEAN,			1
//|.define LUA_TLIGHTUSERDATA,	2
//|.define LUA_TNUMBER,			3
//|.define LUA_TSTRING,			4
//|.define LUA_TTABLE,			5
//|.define LUA_TFUNCTION,			6
//|.define LUA_TUSERDATA,			7
//|.define LUA_TTHREAD,			8
//|
//|.define LUA_TNUM_NUM,		0x33
//|.define LUA_TNUM_NUM_NUM,	0x333
//|.define LUA_TSTR_STR,		0x44
//|.define LUA_TSTR_NUM,		0x43
//|.define LUA_TSTR_NUM_NUM,	0x433
//|.define LUA_TTABLE_NUM,	0x53
//|.define LUA_TTABLE_STR,	0x54
//|
//|
//|// Assembler pseudo instructions. Should actually be put in dynasm, putting them here for now
//|.macro move, dst, src; or dst, src, zero; .endmacro
//|.macro movei, dst, simm8; ori dst, zero, simm8; .endmacro
//|.macro moveli, dst, simm16; addli dst, zero, simm16; .endmacro
//|.macro movelis, dst, simm16; addlis dst, zero, simm16; .endmacro
//|.macro prefetch, src; lb_u zero, src; .endmacro
//|.macro bpt; ill; .endmacro
//|.macro info, simm8; andi zero, zero, simm8; .endmacro
//|.macro infol, simm16; auli zero, zero, simm16; .endmacro
//|
//|// Own pseudo instructions to handle 32 bit stuff easier
//|.macro movewi, dst, simm32
//|	addli dst, zero, lo16(simm32)
//|	auli dst, dst, ha16(simm32)
//|.endmacro
//|
//|.macro movemwi, dst, simm32
//|	addli r25, zero, lo16(simm32)
//|	auli r25, r25, ha16(simm32)
//|	move dst, r25
//|.endmacro
//|
//|//==================================================================
//|// Pseudo instructions specific to this project
//|// Stack-related
//|.macro prologue, size
//|//	move r10, sp
//|	sw sp, lr
//|	addi sp, sp, -size
//|//	storeonstack r10, 4
//|.endmacro
//|
//|.macro epilogue, size
//|	addi sp, sp, size
//|	lw lr, sp
//|.endmacro
//|
//|.macro loadfromstack, reg, idx
//|	addi r25, sp, idx
//|	lw reg, r25
//|.endmacro
//|
//|.macro storeonstack, reg, idx
//|	addi r25, sp, idx
//|	sw r25, reg
//|.endmacro
//|
//|// Push and pop, but ABI-compliant (that is, as long as you pop before you try to 
//|// load a certain stack slot
//|.macro push, reg
//|	storeonstack reg, 4
//|	addi sp, sp, -4
//|.endmacro
//|
//|.macro pop, reg
//|	addi sp, sp, 4
//|	loadfromstack reg, 4
//|.endmacro
//|
//|//==========================================================================
//|
//|.macro preserveglobalregs
//|	storeonstack BASE, 8
//|	storeonstack L, 12
//|	storeonstack TOP, 16
//|	storeonstack LCL, 20
//|	storeonstack CI, 24
//|.endmacro
//|
//|.macro restoreglobalregs
//|	loadfromstack CI, 24
//|	loadfromstack LCL, 20
//|	loadfromstack TOP, 16
//|	loadfromstack L, 12
//|	loadfromstack BASE, 8
//|.endmacro
//|
//|//============================================================================
//|
//|.macro globals_LJ_L, l
//|	move L, l
//|.endmacro
//|
//|.macro globals_LJ_BASE, base
//|	move BASE, base
//|.endmacro
//|
//|.macro globals_LJ_TOP
//|	move TOP, L->top
//|.endmacro
//|
//|.macro globals_LJ_LCL, orig
//|	move LCL, orig
//|.endmacro
//|
//|.macro globals_LJ_CI
//|	move CI, L->ci
//|.endmacro
//|
//|.macro globals_LJ, base
//|	globals_LJ_BASE base
//|	globals_LJ_TOP
//|	globals_LJ_CI
//|.endmacro
//|
//|.macro globals_JL_BASE
//|	move L->base, BASE
//|//	move CI->base, BASE
//|//	subidx TVALUE:r25, BASE, 1
//|//	move CI->func, r25
//|.endmacro
//|
//|.macro globals_JL_CI
//|	move L->ci, CI
//|.endmacro
//|
//|.macro globals_JL_savedpc
//|	move L->savedpc, CI->savedpc
//|.endmacro
//|
//|.macro globals_JL_TOP
//|	move L->top, TOP
//|.endmacro
//|
//|.macro globals_JL
//|	globals_JL_BASE
//|	globals_JL_CI
//|	globals_JL_TOP
//|	globals_JL_savedpc
//|.endmacro
//|//=========================================================================
//|
//|.define LUAFUNC_STACK_SIZE, 8
//|
//|// Easier word multiply
//|.macro mulw_uu, d, a, b
//|	mulhl_uu d, a, b
//|	mulhla_uu d, b, a
//|	shli d, d, 8
//|	mullla_uu d, a, b
//|	mulhhsa_uu d, a, b
//|.endmacro
//|
//|.macro mulw_ss, d, a, b
//|	mulhl_ss d, a, b
//|	mulhla_ss d, b, a
//|	shli d, d, 8
//|	mullla_ss d, a, b
//|	mulhhsa_ss d, a, b
//|.endmacro
//|
//|.macro istt, dst, idx, tp; seqi dst, BASE[idx].tt, tp; .endmacro
//|.macro isnil, dst, idx; istt dst, idx, LUA_TNIL; .endmacro
//|.macro isnumber, dst, idx;  istt dst, idx, LUA_TNUMBER; .endmacro
//|.macro isstring, dst, idx;  istt dst, idx, LUA_TSTRING; .endmacro
//|.macro istable, dst, idx;  istt dst, idx, LUA_TTABLE; .endmacro
//|.macro isfunction, dst, idx;  istt dst, idx, LUA_TFUNCTION; .endmacro
//|
//|.macro settt, val, tp; move val.tt, tp; .endmacro
//|.macro settti, val, tp; movei val.tt, tp; .endmacro
//|
//|
//|.macro copyslot, D, S
//|	move D.value, S.value
//|	move D.value.na[1], S.value.na[1]
//|	move D.tt, S.tt
//|.endmacro
//|
//|.macro loadnumber, reg1, reg2, src
//|	move reg1, src.value
//|	move reg2, src.value.na[1]
//|.endmacro
//|
//|.macro storenumber, dst, reg1, reg2
//|	move dst.value, reg1
//|	move dst.value.na[1], reg2
//|	movei dst.tt, LUA_TNUMBER
//|.endmacro
//|
# 261 "ljit_tilepro64.dash"
//|
//|.macro setbvalue, tv, val		// May use edx.
//||if (val) {  /* true */
//|   movei r25, LUA_TBOOLEAN
//|   move tv.value, r25		// Assumes: LUA_TBOOLEAN == 1
//|   settt tv, r25
//||} else {  /* false */
//|   movei tv.value, 0
//|   settti tv, LUA_TBOOLEAN
//||}
//|.endmacro
//|
//|.macro setsvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TSTRING
//|.endmacro
//|
//|.macro sethvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TABLE
//|.endmacro
//|
//|.macro sethvaluer, tv, reg
//|	move tv.value, reg
//|	settti tv, LUA_TTABLE
//|.endmacro
//|
//|.macro setclvalue, tv, vptr
//|	movemwi tv.value, vptr
//|	settti tv, LUA_TFUNCTION
//|.endmacro
//|
//|.macro setclvaluer, tv, reg
//|	move tv.value, reg
//|	settti tv, LUA_TFUNCTION
//|.endmacro
//|
//|.macro setnilvalue, tv
//|	settti tv, LUA_TNIL
//|.endmacro
//|
//|.macro addidx, dst, src, idx
//|	addli dst, src, (idx)*#src
//|.endmacro
//|
//|.macro subidx, dst, src, idx
//|	addli dst, src, -(idx)*#src
//|.endmacro
//|
//|// Very specific helper macros
//|.macro barriert, t, v
//|	addi r25, v->tt, -LUA_TSTRING
//|	blz r25, >7
//|	move GCOBJECT:r26, v->value.gc
//|	andi r25, GCOBJECT:r26->gch.marked, WHITEBITS
//|	bz r25, >7
//|	andi r25, TABLE:t->marked, bitmask(BLACKBIT)
//|	bz r25, >7
//|	andi TABLE:t->marked, TABLE:t->marked, ~bitmask(BLACKBIT)&0xff //cast(lu_byte, ~bitmask(BLACKBIT))
//|	move GL:r26, L->l_G
//|	move TABLE:t->gclist, GL:r26->grayagain
//|	move GL:r26->grayagain, TABLE:t
//|7:
//|.endmacro
//|
//|.macro loopstart, rl, rh
//|	slt_u r0, rl, rh
//|	bz r0, >9
//|8:
//|.endmacro
//|
//|.macro loopend, rl, rh
//|	slt_u r0, rl, rh
//|	bnzt r0, <8
//|9:
//|.endmacro
//|
//|.macro loopstartidxdown, rl, rh
//|	loopstart rl, rh
//|	subidx rh, rh, 1
//|.endmacro
//|
//|.macro loopendidxup, rl, rh
//|	addidx rl, rl, 1
//|	loopend rl, rh
//|.endmacro
//|
//|//.macro wipe, start, end
//|//	slt_u r0, TVALUE:start, TVALUE:end
//|//	bz r0, >8
//|//7:
//|//	setnilvalue TVALUE:start[0]
//|//	addidx TVALUE:start, TVALUE:start, 1
//|//	slt_u r0, TVALUE:start, TVALUE:end
//|//	bnzt r0, <7
//|//8:
//|//.endmacro
//|.macro wipe, start, end
//|	loopstart TVALUE:start, TVALUE:end
//|		setnilvalue TVALUE:start[0]
//|	loopendidxup TVALUE:start, TVALUE:end
//|.endmacro
//|
//|.macro wipedown, start, end
//|	loopstartidxdown TVALUE:start, TVALUE:end
//|		setnilvalue TVALUE:end[0]
//|	loopend TVALUE:start, TVALUE:end
//|.endmacro
# 6 "ljit_tilepro64.dasc"
//|.actionnames jit_actionnames
enum	jit_actionnames {
	DASM_LINE = 2147483635,
	DASM_IMM,
	DASM_L,
	DASM_G,
	DASM_PC,
	DASM_LABEL_L,
	DASM_LABEL_G,
	DASM_LABEL_PC,
	DASM_SPACE,
	DASM_ALIGN,
	DASM_SECTION,
	DASM_ESC,
	DASM_STOP,
};

#define lo16(n) ((((signed int)n) << 16) >> 16)
#define hi16(n) (((signed int)n) >> 16)
#define ha16(n) ((lo16(n) < 0) ? hi16(n) + 1 : hi16(n))


# 7 "ljit_tilepro64.dasc"
//|.immencmodes
#include "dasm_tilepro64_encmodes.h"
# 8 "ljit_tilepro64.dasc"
//|.actionlist jit_actionlist
static const signed long jit_actionlist[6165] = {
  DASM_LINE,46,13630144,1074472960,DASM_LINE,47,13630209,1074472960,DASM_LINE,
  48,13630274,1074472960,DASM_LINE,49,13630083,1074472960,DASM_LINE,50,536874948,
  1074472960,DASM_IMM,IEM_X0_Imm16,805306628,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,51,536874949,1074472960,DASM_IMM,IEM_X0_Imm16,805306693,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,52,536874950,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306758,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,53,536874951,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306823,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  54,536874952,1074472960,DASM_IMM,IEM_X0_Imm16,805306888,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_LINE,55,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,
  70,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,75,536874946,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  76,536874947,1074472960,DASM_IMM,IEM_X0_Imm16,805306563,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_LINE,77,-266973184,1074491456,DASM_LINE,78,1076891713,1074472960,
  DASM_LINE,79,1880510464,142608448,DASM_LINE,80,22032448,1074472960,DASM_LINE,
  81,-266973184,671088641,DASM_L,IEM_X1_Br,16,DASM_STOP,DASM_LABEL_L,6,DASM_STOP,
  DASM_LINE,88,536874944,1074472960,DASM_IMM,IEM_X0_Imm16,805306368,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,89,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,
  DASM_LINE,118,1880510464,142720704,1077906870,1074472960,DASM_STOP,DASM_LINE,
  120,536873673,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,124,536873665,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,125,24386306,1074472960,DASM_LINE,
  126,795209,1074472960,DASM_STOP,DASM_LINE,129,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  22131264,1074472960,DASM_LINE,130,-266973184,671088641,DASM_L,IEM_X1_Br,11,
  DASM_LINE,131,1076907417,1074472960,1880510464,142625568,1077923254,1074472960,
  DASM_LINE,132,1082134465,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,133,1880510464,
  0,DASM_G,IEM_X1_J_jal,1,DASM_LINE,134,1076907446,1074472960,1076907417,1074472960,
  -266973184,1074492196,DASM_LABEL_L,1,DASM_LINE,138,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  17414976,1074472960,DASM_LINE,139,-266973184,671088640,DASM_L,IEM_X1_Br,12,
  DASM_LINE,140,1076907417,1074472960,1880510464,142625568,1077923254,1074472960,
  DASM_LINE,141,1880510464,0,DASM_G,IEM_X1_J_jal,2,DASM_LINE,142,1076907446,
  1074472960,1076907417,1074472960,-266973184,1074492196,DASM_LABEL_L,2,DASM_LINE,
  144,536873837,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,145,13627995,1074472960,
  536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_LINE,146,13630171,1074472960,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_STOP,DASM_LINE,148,536873707,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,152,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,153,536873730,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,154,22027008,
  1074472960,DASM_LINE,155,-266973184,671088640,DASM_L,IEM_X1_Br,13,DASM_LINE,
  156,13627523,1074472960,DASM_LINE,157,13630209,1074472960,DASM_LINE,158,24558338,
  1074472960,DASM_LINE,159,797442,1074472960,DASM_LINE,160,13627524,1074472960,
  DASM_LINE,161,22032640,1074472960,-266973184,671088640,DASM_L,IEM_X1_Br,19,
  DASM_LABEL_L,8,1082134491,1074472960,536871194,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871172,
  1074472960,DASM_IMM,IEM_X0_Imm16,22032640,1074472960,-266973184,671088641,
  DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LABEL_L,3,DASM_LINE,163,22026944,1074472960,
  -266973184,671088640,DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,536870977,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,164,536871042,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,165,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536871066,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536871066,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536871066,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,166,1082134491,1074472960,
  536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_LINE,167,22026944,1074472960,-266973184,
  671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LINE,168,13630251,1074472960,
  DASM_STOP,DASM_LINE,171,13630171,1074472960,536873818,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  DASM_STOP,DASM_ALIGN,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,DASM_STOP,DASM_ALIGN,
  7,DASM_LABEL_G,3,DASM_LINE,207,1880510464,142720704,1077808566,1074472960,
  DASM_LINE,209,1076923801,1074472960,1880510464,142695200,1076940185,1074472960,
  1880510464,142693152,1076956569,1074472960,1880510464,142697248,1076972953,
  1074472960,1880510464,142701344,1076989337,1074472960,1880510464,142699296,
  DASM_LINE,212,13627434,1074472960,DASM_LINE,213,13627499,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_LINE,214,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629166,1074472960,
  DASM_LINE,217,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,1076893467,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_LINE,220,1077005721,1074472960,1880510464,142611232,
  DASM_STOP,DASM_LINE,226,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1880510464,135398240,
  DASM_LINE,230,1077005721,1074472960,1880510464,1074492193,DASM_LINE,231,1086320768,
  1074472960,DASM_LINE,232,-266973184,671088641,DASM_L,IEM_X1_Br,12,DASM_LINE,
  235,1082134469,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,236,9719940,1074472960,
  8397124,1074472960,1880510464,1074020482,10506372,1074472960,6574212,1074472960,
  DASM_LINE,239,805576,1074472960,DASM_LINE,241,22200832,1074472960,-266973184,
  671088640,DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,1082134491,1074472960,536871450,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871432,1074472960,DASM_IMM,IEM_X0_Imm16,22200832,
  1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LINE,
  243,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,DASM_LABEL_L,2,DASM_LINE,
  246,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,1074492238,1077933851,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_STOP,DASM_LINE,249,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,
  1074472960,DASM_LINE,251,13630171,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,256,1076989337,
  1074472960,-266973184,1074492214,1076972953,1074472960,1880510464,1074492215,
  1076956569,1074472960,1880510464,1074492214,1076940185,1074472960,1880510464,
  1074492213,1076923801,1074472960,-266973184,1074492213,DASM_LINE,257,1082134464,
  1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,259,1077022134,1074472960,-266973184,
  1074493147,DASM_LINE,260,1880510464,135661280,DASM_ALIGN,7,DASM_LABEL_G,4,
  DASM_LINE,266,1880510464,142720704,1077906870,1074472960,DASM_STOP,DASM_LINE,
  268,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629126,1074472960,DASM_LINE,269,536871322,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,1085277888,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,
  270,-266973184,671088640,DASM_L,IEM_X1_Br,11,DASM_LINE,273,536871322,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629125,1074472960,DASM_LINE,274,13627739,1074472960,536873882,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_LINE,275,1880510464,135790752,DASM_LABEL_L,1,DASM_LINE,
  279,13630171,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_LINE,280,13630080,1074472960,DASM_LINE,281,13630145,
  1074472960,DASM_LINE,282,1083178946,1074472960,DASM_LINE,284,1880510464,0,
  DASM_IMM,IEM_X1_J_jal,DASM_LINE,285,-266973184,671088641,DASM_L,IEM_X1_Br,
  12,DASM_LINE,287,13630080,1074472960,DASM_LINE,288,1082138561,1074472960,
  DASM_LINE,289,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LABEL_L,2,
  DASM_LINE,294,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_STOP,DASM_LINE,296,1076923830,1074472960,-266973184,1074493147,
  DASM_LINE,297,1880510464,135661280,DASM_ALIGN,7,DASM_LABEL_G,5,DASM_STOP,
  DASM_LINE,305,13630171,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630299,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_LINE,307,13630080,1074472960,DASM_LINE,
  308,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,1880510464,135398240,DASM_LINE,310,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629163,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,1074472960,DASM_LINE,
  312,536873837,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,313,536873707,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,316,1082134470,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,317,9723907,1074472960,8388995,1074472960,-266973184,1074020449,
  10510339,1074472960,6578179,1074472960,DASM_LINE,319,24394504,1074472960,
  DASM_LINE,320,13630148,1074472960,DASM_LINE,321,22200833,1074472960,DASM_LINE,
  322,-266973184,671088672,DASM_L,IEM_X1_Br,12,DASM_LABEL_L,1,DASM_LINE,324,
  536871450,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,1880510464,1074492238,13629211,1074472960,536871194,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871450,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536871194,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536871450,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536871194,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,325,1076887812,1074472960,
  DASM_IMM,IEM_X0_Imm8,DASM_LINE,326,1076888072,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,327,22200833,1074472960,DASM_LINE,328,-266973184,671088673,DASM_L,
  IEM_X1_Br,1,DASM_LABEL_L,2,DASM_LINE,330,801516,1074472960,DASM_STOP,DASM_LINE,
  333,1076923830,1074472960,-266973184,1074493147,DASM_LINE,334,1880510464,
  135661280,DASM_ALIGN,7,DASM_LABEL_G,1,DASM_LINE,338,1880510464,142720704,
  1077906870,1074472960,DASM_LINE,339,13630171,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,340,13630080,
  1074472960,DASM_LINE,341,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,342,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_LINE,343,1076923830,1074472960,-266973184,1074493147,DASM_LINE,
  344,1880510464,135661280,DASM_ALIGN,7,DASM_LABEL_G,2,DASM_LINE,347,1880510464,
  142720704,1077906870,1074472960,DASM_LINE,348,13630171,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,1880510464,142662464,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  349,13630080,1074472960,DASM_LINE,350,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_LINE,351,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_LINE,352,536873837,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  353,1076923830,1074472960,-266973184,1074493147,DASM_LINE,354,1880510464,
  135661280,DASM_ALIGN,7,DASM_STOP,DASM_LINE,371,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629120,1074472960,DASM_LINE,372,536870938,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629121,
  1074472960,DASM_LINE,373,536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,
  DASM_LINE,374,20979776,1074472960,DASM_LINE,375,-266973184,671088640,DASM_L,
  IEM_X1_Br,11,DASM_LINE,376,13630171,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,377,13630080,1074472960,
  DASM_LINE,378,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LABEL_L,1,
  DASM_STOP,DASM_LABEL_PC,DASM_STOP,DASM_LABEL_PC,DASM_ALIGN,7,65535,DASM_SPACE,
  0,0,0,0,0,DASM_STOP,DASM_LINE,434,536873668,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,438,22200576,1074472960,-266973184,671088640,DASM_L,IEM_X1_Br,
  19,DASM_LABEL_L,8,1082134491,1074472960,536871194,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871172,
  1074472960,DASM_IMM,IEM_X0_Imm16,22200576,1074472960,-266973184,671088641,
  DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LINE,439,22059776,1074472960,-266973184,
  671088640,DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,1082134491,1074472960,536873754,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873772,1074472960,DASM_IMM,IEM_X0_Imm16,22059776,
  1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_STOP,
  DASM_LINE,443,22057216,1074472960,-266973184,671088640,DASM_L,IEM_X1_Br,19,
  DASM_LABEL_L,8,1082134491,1074472960,536871194,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871172,
  1074472960,DASM_IMM,IEM_X0_Imm16,22057216,1074472960,-266973184,671088641,
  DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_STOP,DASM_LINE,446,13628012,1074472960,
  DASM_STOP,DASM_LINE,466,13630080,1074472960,DASM_LINE,467,13630145,1074472960,
  DASM_LINE,468,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,474,
  536873669,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,475,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629163,1074472960,DASM_STOP,DASM_LINE,477,536873837,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,481,13630150,1074472960,DASM_LINE,
  482,22200640,1074472960,-266973184,671088640,DASM_L,IEM_X1_Br,19,DASM_LABEL_L,
  8,DASM_LINE,483,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536871322,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,484,536871302,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,485,536871237,1074472960,DASM_IMM,IEM_X0_Imm16,
  22200640,1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,
  9,DASM_LINE,486,13627820,1074472960,DASM_STOP,DASM_LINE,493,536871258,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,497,536873708,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,
  502,1076923830,1074472960,-266973184,1074493147,DASM_LINE,503,1880510464,
  135661280,DASM_STOP,DASM_LINE,508,536873707,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,510,536873708,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,
  DASM_LINE,512,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629166,1074472960,DASM_LINE,
  513,536874969,1074472960,DASM_IMM,IEM_X0_Imm16,805307993,1074472960,DASM_IMM,
  IEM_X0_Imm16,13629019,1074472960,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,517,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1880510464,135398240,DASM_STOP,
  DASM_LINE,521,13630216,1074472960,DASM_LINE,522,536873708,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_LINE,523,22200832,1074472960,-266973184,671088640,DASM_L,
  IEM_X1_Br,19,DASM_LABEL_L,8,1082134491,1074472960,536871450,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  536871432,1074472960,DASM_IMM,IEM_X0_Imm16,22200832,1074472960,-266973184,
  671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LINE,524,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629164,1074472960,DASM_STOP,DASM_LINE,527,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629163,1074472960,DASM_LINE,529,536873818,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629123,1074472960,DASM_LINE,530,536871130,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629166,
  1074472960,DASM_STOP,DASM_LINE,537,536873708,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,539,536873668,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  540,536871194,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629166,1074472960,DASM_STOP,DASM_LINE,
  542,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,DASM_LINE,543,13630146,
  1074472960,DASM_STOP,DASM_LINE,545,22200576,1074472960,-266973184,671088640,
  DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,DASM_LINE,546,536871194,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536871066,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871194,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536871066,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871194,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871066,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  547,536871042,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,548,536871172,1074472960,
  DASM_IMM,IEM_X0_Imm16,22200576,1074472960,-266973184,671088641,DASM_L,IEM_X1_Br,
  8,DASM_LABEL_L,9,DASM_LINE,550,13627564,1074472960,DASM_LINE,551,536873837,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,552,536874969,1074472960,DASM_IMM,
  IEM_X0_Imm16,805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,
  536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,556,1076923830,1074472960,
  -266973184,1074493147,DASM_LINE,557,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1880510464,
  135791456,DASM_STOP,DASM_LINE,564,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,572,536874945,1074472960,DASM_IMM,IEM_X0_Imm16,805306433,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,573,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871002,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871002,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,575,1880510464,135661280,DASM_STOP,DASM_LINE,584,1082134491,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,590,1082138585,1074472960,
  13629019,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13629019,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,1082134491,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,1082138587,1074472960,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  DASM_STOP,DASM_LINE,592,1880510464,0,DASM_PC,IEM_X1_J_j,DASM_STOP,DASM_LINE,
  600,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629127,1074472960,DASM_LINE,601,536871386,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629125,1074472960,DASM_LINE,602,536871258,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871258,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,607,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629121,1074472960,DASM_LINE,
  608,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629125,1074472960,DASM_LINE,609,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  610,1082150848,1074472960,DASM_LINE,611,536871258,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,21082120,
  1074472960,DASM_LINE,612,-266973184,671088896,DASM_L,IEM_X1_Br,15,DASM_LABEL_L,
  4,DASM_LINE,614,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,DASM_LINE,
  615,536871066,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,1343227587,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,616,DASM_STOP,-266973184,671088736,DASM_L,IEM_X1_Br,15,DASM_LINE,
  617,536871002,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,1343227588,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,618,-266973184,671088768,DASM_L,IEM_X1_Br,15,DASM_LINE,619,13630080,
  1074472960,DASM_LINE,620,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LABEL_L,
  5,DASM_STOP,DASM_LINE,628,13630080,1074472960,DASM_LINE,629,536874945,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306433,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  630,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_LINE,631,13630171,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,632,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_LINE,633,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629165,1074472960,DASM_LINE,634,13627419,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,1880510464,142662464,1082154971,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_STOP,DASM_LINE,643,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306498,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,644,1076887682,1074472960,
  DASM_IMM,IEM_X0_Imm8,DASM_LINE,645,764342209,1074472960,DASM_LINE,646,13630080,
  1074472960,DASM_LINE,649,13630235,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  DASM_LINE,650,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,653,536873754,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873754,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873754,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,661,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_LINE,662,1076887682,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,663,764342209,1074472960,DASM_LINE,664,13630080,1074472960,DASM_LINE,
  666,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873754,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536873754,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873754,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_LINE,667,536873772,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_LINE,670,13630235,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  DASM_LINE,671,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,672,536873772,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,679,13630080,1074472960,
  DASM_LINE,680,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,
  683,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,687,536873666,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,689,536873667,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,
  690,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,695,13630080,1074472960,
  DASM_LINE,696,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,
  699,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,703,536873666,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,707,536874947,1074472960,DASM_IMM,IEM_X0_Imm16,805306563,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,711,536873667,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,713,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,DASM_LINE,718,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,
  729,536873708,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,732,1076907417,
  1074472960,1880510464,142668576,1077923254,1074472960,DASM_LINE,733,1076907417,
  1074472960,1880510464,142670624,1077923254,1074472960,DASM_LINE,734,1076907417,
  1074472960,1880510464,142672672,1077923254,1074472960,DASM_LINE,735,1076907417,
  1074472960,1880510464,142674720,1077923254,1074472960,DASM_STOP,DASM_LINE,
  738,536873694,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,741,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629151,1074472960,DASM_STOP,DASM_LINE,745,536874976,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308448,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,748,24505091,1074472960,DASM_LINE,752,-266973184,1074208865,
  DASM_LINE,753,800801,1074472960,DASM_LINE,754,536872922,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  21084224,1074472960,DASM_LINE,755,-266973184,671088641,DASM_L,IEM_X1_Br,13,
  DASM_STOP,DASM_LINE,758,13629506,1074472960,DASM_LINE,759,13629377,1074472960,
  DASM_LINE,760,13630080,1074472960,DASM_LINE,761,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,DASM_LABEL_L,3,DASM_LINE,765,22202240,1074472960,-266973184,671088640,
  DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,536873772,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,766,13629506,1074472960,DASM_LINE,767,13629377,1074472960,DASM_LINE,
  768,13630080,1074472960,DASM_LINE,769,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_LINE,770,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536870938,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,
  536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873754,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,771,536873754,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,1077921497,1074472960,-266973184,671089444,DASM_L,IEM_X1_Br,17,
  536873754,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629146,1074472960,536872602,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,1343227609,1074472960,DASM_IMM,IEM_X0_Imm8,-266973184,671089440,
  DASM_L,IEM_X1_Br,17,536872922,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,-266973184,1074492237,1343227609,
  1074472960,DASM_IMM,IEM_X0_Imm8,-266973184,671089440,DASM_L,IEM_X1_Br,17,
  536872922,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,1074492238,1343227675,1074472960,536872922,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_IMM,IEM_X0_Imm8,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629146,
  1074472960,536872602,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,1074472960,536872922,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,13629403,1074472960,536872602,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LABEL_L,
  7,DASM_LINE,772,1077934177,1074472960,DASM_LINE,773,22202240,1074472960,-266973184,
  671088641,DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_LINE,774,536873818,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629164,1074472960,DASM_STOP,DASM_LINE,777,1076907446,1074472960,
  1076907417,1074472960,-266973184,1074492208,DASM_LINE,778,1076907446,1074472960,
  1076907417,1074472960,1880510464,1074492208,DASM_LINE,779,1076907446,1074472960,
  1076907417,1074472960,-266973184,1074492207,DASM_LINE,780,1076907446,1074472960,
  1076907417,1074472960,1880510464,1074492207,DASM_STOP,DASM_LINE,803,536874950,
  1074472960,DASM_IMM,IEM_X0_Imm16,805306758,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,804,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536871322,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,DASM_STOP,DASM_LINE,808,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629120,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629121,
  1074472960,DASM_STOP,DASM_LINE,813,536874950,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306758,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,814,536871322,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629122,1074472960,536871322,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,
  1074472960,DASM_STOP,DASM_LINE,818,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,DASM_STOP,
  DASM_LINE,824,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,827,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,830,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_STOP,DASM_LINE,833,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,
  DASM_LINE,836,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,839,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,842,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_STOP,DASM_LINE,845,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,
  DASM_LINE,848,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,856,
  -266973184,671088644,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,859,-266973184,
  671088643,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,864,-266973184,671088645,
  DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,867,-266973184,671088642,DASM_PC,IEM_X1_Br,
  DASM_STOP,DASM_LINE,872,13627419,1074472960,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13627483,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1082146779,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,874,1082146779,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,882,536874945,1074472960,
  DASM_IMM,IEM_X0_Imm16,805306433,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,
  DASM_LINE,884,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,
  887,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,889,536873666,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,891,536874969,1074472960,DASM_IMM,IEM_X0_Imm16,805307993,
  1074472960,DASM_IMM,IEM_X0_Imm16,13629019,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_LINE,892,13630080,1074472960,DASM_LINE,893,1880510464,0,DASM_IMM,
  IEM_X1_J_jal,DASM_STOP,DASM_LINE,895,-266973184,671088641,DASM_PC,IEM_X1_Br,
  DASM_STOP,DASM_LINE,897,-266973184,671088640,DASM_PC,IEM_X1_Br,DASM_STOP,
  DASM_LINE,901,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,805306498,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,903,536873666,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,906,536874947,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306563,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,908,536873667,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,910,536874969,1074472960,
  DASM_IMM,IEM_X0_Imm16,805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,911,13630080,1074472960,
  DASM_LINE,912,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,913,1082134468,
  1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,914,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_STOP,DASM_LINE,951,13630171,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,952,13630080,1074472960,
  DASM_LINE,953,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,954,536873666,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,955,1880510464,0,DASM_IMM,IEM_X1_J_jal,
  DASM_LINE,956,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629164,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629165,
  1074472960,DASM_STOP,DASM_LINE,961,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,
  1074472960,DASM_LINE,962,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629124,1074472960,
  DASM_LINE,963,1573124,1074472960,DASM_LINE,964,1880510464,1074202624,DASM_LINE,
  965,13369604,1074472960,DASM_LINE,966,17559808,1074472960,DASM_LINE,967,1082138587,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,968,13627419,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,975,13630171,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,13630299,1074472960,536873626,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,13630235,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873818,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  976,13630080,1074472960,DASM_LINE,977,1082134465,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,978,1082134466,1074472960,DASM_IMM,IEM_X0_Imm8,DASM_LINE,979,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,980,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629165,1074472960,DASM_STOP,DASM_LINE,983,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,996,536874945,1074472960,DASM_IMM,IEM_X0_Imm16,805306433,1074472960,
  DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,998,536873665,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,1001,536874946,1074472960,DASM_IMM,IEM_X0_Imm16,
  805306498,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,1003,536873666,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_STOP,DASM_LINE,1006,13630080,1074472960,
  DASM_LINE,1007,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,1010,
  -266973184,671088641,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,1013,-266973184,
  671088640,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,1027,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629120,1074472960,DASM_LINE,1028,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629124,1074472960,DASM_LINE,1029,13627393,1074472960,DASM_LINE,1030,1589313,
  1074472960,DASM_LINE,1031,-266973184,1074006048,DASM_LINE,1032,786497,1074472960,
  DASM_LINE,1033,-266973184,1074202656,DASM_STOP,DASM_LINE,1038,-266973184,
  671088673,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,1040,-266973184,671088672,
  DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,1044,-266973184,671088672,DASM_L,IEM_X1_Br,
  11,DASM_STOP,DASM_LINE,1046,-266973184,671088673,DASM_L,IEM_X1_Br,11,DASM_STOP,
  DASM_LINE,1048,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,DASM_LINE,
  1049,13627419,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,1050,13627675,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,1051,13627611,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,DASM_LINE,1052,1880510464,0,DASM_PC,IEM_X1_J_j,
  DASM_LABEL_L,1,DASM_STOP,DASM_LINE,1059,1880510464,0,DASM_PC,IEM_X1_J_j,DASM_STOP,
  DASM_LINE,1074,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,DASM_LINE,1075,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629122,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,
  1074472960,DASM_LINE,1076,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1077,
  13627419,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627483,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1082146779,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_LINE,1078,1880510464,0,DASM_PC,IEM_X1_J_j,DASM_STOP,DASM_LINE,
  1083,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629121,1074472960,DASM_LINE,1084,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629122,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,
  DASM_LINE,1085,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1086,13627419,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627483,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,1082146779,1074472960,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  DASM_LINE,1087,13627419,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13627483,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,1082146779,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_STOP,DASM_LINE,1090,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629122,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,1074472960,
  DASM_STOP,DASM_LINE,1092,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1093,
  -266973184,671088643,DASM_PC,IEM_X1_Br,DASM_STOP,DASM_LINE,1096,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1097,-266973184,671088645,DASM_PC,IEM_X1_Br,
  DASM_STOP,DASM_LINE,1101,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629121,1074472960,DASM_LINE,1102,13631426,
  1074472960,DASM_LINE,1103,13631427,1074472960,DASM_LINE,1104,1880510464,0,
  DASM_IMM,IEM_X1_J_jal,DASM_LINE,1105,-266973184,671088643,DASM_L,IEM_X1_Br,
  13,DASM_LINE,1106,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629120,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629121,1074472960,DASM_LINE,1107,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,
  1074492237,13629122,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629123,
  1074472960,DASM_LINE,1108,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1109,
  -266973184,671088643,DASM_PC,IEM_X1_Br,DASM_LINE,1110,1880510464,0,DASM_L,
  IEM_X1_J_j,14,DASM_LABEL_L,3,DASM_LINE,1112,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,
  13629120,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629121,1074472960,
  DASM_LINE,1113,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,-266973184,1074492237,13629123,1074472960,DASM_LINE,1114,1880510464,
  0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1115,-266973184,671088645,DASM_PC,IEM_X1_Br,
  DASM_LABEL_L,4,DASM_STOP,DASM_LINE,1127,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,
  13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,
  DASM_LINE,1130,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,1085277888,1074472960,DASM_LINE,
  1131,-266973184,671088641,DASM_L,IEM_X1_Br,11,DASM_LINE,1132,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536873690,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536873690,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  1133,1880510464,0,DASM_PC,IEM_X1_J_j,DASM_LABEL_L,1,DASM_STOP,DASM_LINE,1141,
  13630080,1074472960,DASM_LINE,1142,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_LINE,1143,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_STOP,DASM_LINE,1154,
  13630080,1074472960,DASM_LINE,1155,1082134465,1074472960,DASM_IMM,IEM_X0_Imm8,
  DASM_LINE,1156,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,DASM_LINE,
  1157,1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1158,536874969,1074472960,
  DASM_IMM,IEM_X0_Imm16,805307993,1074472960,DASM_IMM,IEM_X0_Imm16,13629019,
  1074472960,536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,1159,13627419,1074472960,
  536873690,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,1082159067,1074472960,536873690,1074472960,
  DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,
  142662464,DASM_LINE,1160,1076907417,1074472960,1880510464,142668576,1077923254,
  1074472960,DASM_STOP,DASM_LINE,1163,536873882,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536870938,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_STOP,DASM_LINE,1166,13627422,
  1074472960,DASM_LINE,1167,13630171,1074472960,536873626,1074472960,DASM_IMM,
  IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,
  13630299,1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,
  1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,13630235,1074472960,
  536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,1880510464,142662464,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,1074492238,13629211,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,1168,13630080,1074472960,
  DASM_LINE,1169,536873665,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,1170,
  1880510464,0,DASM_IMM,IEM_X1_J_jal,DASM_LINE,1171,13627419,1074472960,536872858,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,142662464,DASM_LINE,1172,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629163,
  1074472960,536873626,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,
  DASM_IMM,IEM_X0_Imm16,-266973184,1074492237,13629164,1074472960,536873626,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  -266973184,1074492237,13629165,1074472960,DASM_STOP,DASM_LINE,1175,1076907446,
  1074472960,1076907417,1074472960,1880510464,1074492207,DASM_STOP,DASM_LINE,
  1184,536873818,1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,
  IEM_X0_Imm16,-266973184,1074492237,13629122,1074472960,DASM_LINE,1185,536871042,
  1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,1186,536873667,1074472960,DASM_IMM,
  IEM_X0_Imm16,DASM_STOP,DASM_LINE,1190,536871044,1074472960,DASM_IMM,IEM_X0_Imm16,
  DASM_STOP,DASM_LINE,1194,13630148,1074472960,DASM_LINE,1195,24387845,1074472960,
  DASM_LINE,1196,807148,1074472960,DASM_STOP,DASM_LINE,1199,22036608,1074472960,
  -266973184,671088640,DASM_L,IEM_X1_Br,19,DASM_LABEL_L,8,DASM_LINE,1200,536871066,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871130,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871066,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871130,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,536871066,
  1074472960,DASM_IMM,IEM_X0_Imm16,805308058,1074472960,DASM_IMM,IEM_X0_Imm16,
  1880510464,1074492238,13629211,1074472960,536871130,1074472960,DASM_IMM,IEM_X0_Imm16,
  805308058,1074472960,DASM_IMM,IEM_X0_Imm16,1880510464,142662464,DASM_LINE,
  1201,536871107,1074472960,DASM_IMM,IEM_X0_Imm16,DASM_LINE,1202,536871042,
  1074472960,DASM_IMM,IEM_X0_Imm16,22036608,1074472960,-266973184,671088641,
  DASM_L,IEM_X1_Br,8,DASM_LABEL_L,9,DASM_STOP
};

# 9 "ljit_tilepro64.dasc"
//|.globals JSUB_
enum {
  JSUB_BUGSTOP,
  JSUB_GROW_STACK,
  JSUB_GROW_CI,
  JSUB_GATE_LJ,
  JSUB_GATE_JL,
  JSUB_GATE_JC,
  JSUB__MAX
};
# 10 "ljit_tilepro64.dasc"
//|
/* ------------------------------------------------------------------------ */
#define DASM_MAXSECTION 1

/* Arch string. */
const char luaJIT_arch[] = "tilepro64";

/* Forward declarations for C functions called from jsubs. */
static void jit_hookins(lua_State *L, const Instruction *newpc);
static void jit_gettable_fb(lua_State *L, Table *t, StkId dest);
static void jit_settable_fb(lua_State *L, Table *t, StkId val);

/* these are defined in libtile-cc */
extern double __float64_add(double,double);
extern double __float64_sub(double,double);
extern double __float64_mul(double,double);
extern double __float64_div(double,double);
extern double __float64_neg(double,double);
extern int __float64_gcc_lt(double,double);
extern int __float64_gcc_le(double,double);
extern int __float64_gcc_gt(double,double);
extern int __float64_gcc_ge(double,double);
#include <math.h>
#include <stdio.h>
#include "ljit_debug_stackdump.h"

// apparently got removed. using modf of a div now
double __float64_rem(double x, double y)
{
	double i;
	modf(x / y, &i);
	return x - y * i;
}

static void jit_emit_stackdump(jit_State *J, const char* curop_name, int ra, int rb, int rc, int rbx)
{
	//|	move r0, BASE
	//|	move r1, TOP
	//|	move r2, CI
	//|	move r3, L
	//|	movewi r4, curop_name
	//|	movewi r5, ra
	//|	movewi r6, rb
	//|	movewi r7, rc
	//|	movewi r8, rbx
	//|	jal &ljit_debug_dumpstack
	dasm_put(Dst, 0, lo16(curop_name), ha16(curop_name), lo16(ra), ha16(ra), lo16(rb), ha16(rb), lo16(rc), ha16(rc), lo16(rbx), ha16(rbx), &ljit_debug_dumpstack);
# 56 "ljit_tilepro64.dasc"
}

static void jit_emit_custom_stackdump(jit_State *J, const char* curop_name)
{
	jit_emit_stackdump(J,curop_name,0,0,0,0);
}

static void jit_break()
{
	// Set a breakpoint on entry of this func.
}

static void jit_emit_break(jit_State *J)
{
	//|	jal &jit_break
	dasm_put(Dst, 73, &jit_break);
# 71 "ljit_tilepro64.dasc"
}

static void jit_emit_counter_break(jit_State *J, unsigned int* ctr, unsigned int count)
{
	//|	movewi r2, ctr
	//|	movewi r3, count
	//|	lw r1, r2
	//|	addi r1, r1, 1
	//|	sw r2, r1
	//|	slt_u r0, r1, r3
	//|	bnzt r0, >6
	dasm_put(Dst, 80, lo16(ctr), ha16(ctr), lo16(count), ha16(count));
# 82 "ljit_tilepro64.dasc"
	jit_emit_break(J);
	//|6:
	dasm_put(Dst, 124);
# 84 "ljit_tilepro64.dasc"
}

static void jit_emit_printf(jit_State *J, const char* str)
{
	//|	movewi r0, str
	//|	jal &printf
	dasm_put(Dst, 127, lo16(str), ha16(str), &printf);
# 90 "ljit_tilepro64.dasc"
}

/* Detect CPU features and set JIT flags. */
static int jit_cpudetect(jit_State *J)
{
	return JIT_S_OK;
}

/* Check some assumptions. Should compile to nop. */
static int jit_consistency_check(jit_State *J)
{
/*	do {*/
		/* Force a compiler error for inconsistent structure sizes. */
		/* Check LUA_TVALUE_ALIGN in luaconf.h, too. */
/*		||int check_TVALUE_SIZE_in_ljit_x86_dash[1+TVALUE_SIZE-sizeof(TValue)];
		int check_TVALUE_SIZE_in_ljit_x86_dash_[1+sizeof(TValue)-TVALUE_SIZE];
		((void)check_TVALUE_SIZE_in_ljit_x86_dash[0]);
		((void)check_TVALUE_SIZE_in_ljit_x86_dash_[0]);
		if (LUA_TNIL != 0 || LUA_TBOOLEAN != 1 || PCRLUA != 0) break;
		if ((int)&(((Node *)0)->i_val) != (int)&(((StkId)0)->value)) break;*/
		return JIT_S_OK;
/*	} while (0);
	J->dasmstatus = 999999999;*/  /* Recognizable error. */
/*	return JIT_S_COMPILER_ERROR;*/
}

static int jit_std_prologue(jit_State *J, int stacksize, lu_byte is_vararg)
{
	//|	prologue LUAFUNC_STACK_SIZE
	dasm_put(Dst, 144);
# 119 "ljit_tilepro64.dasc"
	
	//|	addidx r9, BASE, stacksize+1
	dasm_put(Dst, 151, (stacksize+1)*sizeof(TValue));
# 121 "ljit_tilepro64.dasc"

	if(is_vararg)
	{
		//|	addidx r1, BASE, 1
		//|	sub r2, TOP, r1
		//|	add r9, r9, r2
		dasm_put(Dst, 158, (1)*sizeof(TValue));
# 127 "ljit_tilepro64.dasc"
	}

	//|	slt_u r0, r9, L->stack_last
	//|	bnz r0, >1
	//|	push r9
	//|	movei r1, stacksize+1
	//|	jal ->GROW_STACK
	//|	pop r9
	//|1:
	//|	// This is a slight overallocation (BASE[1+stacksize] would be enough).
	//|	// We duplicate luaD_precall() behaviour so we can use luaD_growstack().
	//|	seq r0, CI, L->end_ci
	//|	bz r0, >2
	//|	push r9
	//|	jal ->GROW_CI			// CI overflow?
	//|	pop r9
	//|2:
	//|	addidx CI, CI, 1
	//|	move CI->top, r9
	//|	move CI->func, BASE
	dasm_put(Dst, 173, lo16(Dt1(->stack_last)), ha16(Dt1(->stack_last)), stacksize+1, lo16(Dt1(->end_ci)), ha16(Dt1(->end_ci)), (1)*sizeof(CallInfo), lo16(Dt4(->top)), ha16(Dt4(->top)), lo16(Dt4(->func)), ha16(Dt4(->func)));
# 147 "ljit_tilepro64.dasc"

	//|	addidx BASE, BASE, 1
	dasm_put(Dst, 306, (1)*sizeof(TValue));
# 149 "ljit_tilepro64.dasc"
	
	if(is_vararg)
	{
		//|	addidx TVALUE:r1, BASE, J->pt->numparams
		//|	addidx TVALUE:r2, TOP, J->pt->numparams
		//|	slt_u r0, TOP, r1
		//|	bzt r0, >3
		//|	move r3, r2
		//|	move r1, TOP
		//|	sub r2, TOP, BASE
		//|	add r2, TOP, r2
		//|	move r4, r2
		//|	wipe r4, r3
		//|3:
		//|	loopstartidxdown BASE, TVALUE:r1
		//|		subidx TVALUE:r2, TVALUE:r2, 1
		//|		copyslot TVALUE:r2[0], TVALUE:r1[0]
		//|		setnilvalue TVALUE:r1[0]
		//|	loopend BASE, TVALUE:r1
		//|	move BASE, TOP
		dasm_put(Dst, 313, (J->pt->numparams)*sizeof(TValue), (J->pt->numparams)*sizeof(TValue), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), -(1)*sizeof(TValue), -(1)*sizeof(TValue), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)));
# 169 "ljit_tilepro64.dasc"
	}

	//|	move CI->base, BASE
	dasm_put(Dst, 513, lo16(Dt4(->base)), ha16(Dt4(->base)));
# 172 "ljit_tilepro64.dasc"

	return 0;
}

/* Compile JIT subroutines (once). */
static int jit_compile_jsub(jit_State *J)
{
	int status = jit_consistency_check(J);
	if (status != JIT_S_OK) return status;
	status = jit_cpudetect(J);
	if (status != JIT_S_OK) return status;
	dasm_setup(Dst, jit_actionlist);
	//|// Macros to reorder and combine JIT subroutine definitions.
	//|.macro .jsub, name
	//|.capture JSUB			// Add the entry point.
	//||//-----------------------------------------------------------------------
	//||//->name:
	//|	.align 64
	//|->name:
	//|.endmacro
	//|.macro .endjsub;  .endcapture; .endmacro
	//|.macro .dumpjsub;  .dumpcapture JSUB; .endmacro
	//|
	//|// Little trick to avoid a small bug in the assembler (global label at address 0)
	//|.align 64
	//|.space 0x10
	dasm_put(Dst, 528);
	//|//-----------------------------------------------------------------------
# 199 "ljit_tilepro64.dasc"
	//|// Procedure: GATE_LJ(lua_State* L, TValue* func, int nresults)
	//|// L contains the Lua state
	//|// func is the stack frame base pointer for this functions
	//|// nresults is the amount of results the caller is expecting. rest should
	//|//			be truncated
	//|//---------------------
	//|.align 64
	//|->GATE_LJ:
	//|	prologue 32
	//|	// Preserve "global type" registers.
	//|	preserveglobalregs
	//|
	//|	// Init our global types
	//|	globals_LJ_L r0
	//|	globals_LJ r1
	//|	globals_LJ_LCL BASE->value	
	//|
	//|	// Prevent stackless yield. TODO: figure out what a stackless yield is.
	//|	addi L->nCcalls, L->nCcalls, 1
	//|
	//|	// Store number of requested results.
	//|	storeonstack r2, 28
	//|
	dasm_put(Dst, 547, lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt2(->value)), ha16(Dt2(->value)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)));
# 222 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"Entering LJ gate");
	//|
	//jit_emit_printf(J,"Starting function C->L");
	//|	// Call the gate, probably not compiled yet, but may be compiled.
	//|	jalr LCL->jit_gate
	//|
	//|
	//|	// Check if arg 3 was LUA_MULTRET
	//|	loadfromstack r2, 28
	//|	seqi r0, r2, -1
	//|	bnz r0, >2		// If so, we can skip this
	//|
	//|	// Multiply number of values on stack by value size
	//|	movei r5, #TOP
	//|	mulw_uu r4, r2, r5
	//|
	//|	// Get index right above the last nresults. All
	//|	add r8, BASE, r4
	//|
	//|	wipe r8, TOP
	//|
	//|	move TOP, CI->top
	//|
	//|2:
	//|	addi L->nCcalls, L->nCcalls, -1
	//|
	dasm_put(Dst, 656, lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)), sizeof(TValue), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), lo16(Dt4(->top)), ha16(Dt4(->top)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)), lo16(Dt1(->nCcalls)), ha16(Dt1(->nCcalls)));
		/* TODO: This causes the problems when calling an uncompiled func */
# 249 "ljit_tilepro64.dasc"
	//|	move BASE, CI->base
	//|	// Push our "fast" state to the "slow" interpreter state
	//|	globals_JL
	//|
	dasm_put(Dst, 786, lo16(Dt4(->base)), ha16(Dt4(->base)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)));
# 253 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"Returning from LJ gate");
	//|
	//|	// Restore "global type" registers
	//|	restoreglobalregs
	//|	movei r0, PCRC
	//|
	//|	epilogue 32
	//|	jrp lr
	//|
	//|
	//|
	//|.align 64
	//|->GATE_JL:
	//|	prologue 8
	dasm_put(Dst, 861, PCRC);
# 267 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"Entering JL gate");
	//|	move PROTO:r6, LCL->p
	//|	seqi r0, PROTO:r6->jit_status, JIT_S_OK
	//|	bz r0, >1		// Already compiled?
	//|
	//|	// Yes, copy callgate...
	//|	move r5, PROTO:r6->jit_mcode
	//|	move LCL->jit_gate, r5
	//|	jr r5
	//|
	//|	// No... Compile
	//|1:
	//|	globals_JL
	//|	move r0, L
	//|	move r1, BASE
	//|	movei r2, -1
	//|//	sub BASE, BASE, L->stack
	//|	jal &luaD_precall
	//|	bnzt r0, >2
	//|
	//|	move r0, L
	//|	movei r1, 1
	//|	jal &luaV_execute
	dasm_put(Dst, 910, lo16(Dt5(->p)), ha16(Dt5(->p)), lo16(DtF(->jit_status)), ha16(DtF(->jit_status)), JIT_S_OK, lo16(DtF(->jit_mcode)), ha16(DtF(->jit_mcode)), lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaD_precall, &luaV_execute);
# 290 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"After executing uncompiled function");
	//|
	//|2:
	//|//	add BASE, BASE, L->stack
	//|	globals_LJ L->base
	dasm_put(Dst, 1081, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 295 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"Returning from JL gate");
	//|	epilogue 8
	//|	jrp lr
	//|
	//|.align 64
	//|->GATE_JC:
	dasm_put(Dst, 1122);
# 301 "ljit_tilepro64.dasc"

	jit_std_prologue(J, LUA_MINSTACK, 0);

	//jit_emit_custom_stackdump(J,"Entering JC gate");
	//|	globals_JL
	//|
	//|	move r0, L
	//|	jalr CCLOSURE:LCL->f
	//|
	//|	globals_LJ L->base
	//|
	//|	subidx CI, CI, 1
	//|	subidx BASE, BASE, 1
	//|
	//|	// Assume retval != LUA_MULTRET for now.
	//|	movei r6, #TOP
	//|	mulw_uu r3, r0, r6
	//|
	//|	sub r8, TOP, r3
	//|	move r4, BASE
	//|	slt_u r1, r8, TOP
	//|	bz r1, >2
	//|1:
	//|	copyslot TVALUE:r4[0], TVALUE:r8[0]
	dasm_put(Dst, 1137, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), lo16(DtE(->f)), ha16(DtE(->f)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), -(1)*sizeof(CallInfo), -(1)*sizeof(TValue), sizeof(TValue), lo16(Dt8([0].value)), ha16(Dt8([0].value)));
# 325 "ljit_tilepro64.dasc"
	//|	addi r4, r4, #TVALUE
	//|	addi r8, r8, #TVALUE
	//|	slt_u r1, r8, TOP
	//|	bnzt r1, <1
	//|2:
	//|	add TOP, BASE, r3
	//|
	dasm_put(Dst, 1315, lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), sizeof(TValue), sizeof(TValue));
# 332 "ljit_tilepro64.dasc"
	//jit_emit_custom_stackdump(J,"Returning from JC gate");
	//|	epilogue LUAFUNC_STACK_SIZE
	//|	jrp lr
	//|
	//|.align 64
	//|->GROW_STACK:
	//|	prologue 8
	//|	globals_JL
	//|	move r0, L
	//|	jal &luaD_growstack
	//|	globals_LJ L->base
	//|	epilogue 8
	//|	jrp lr
	//|.align 64
	//|->GROW_CI:
	//|	prologue 8
	//|	globals_JL
	dasm_put(Dst, 1403, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaD_growstack, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)));
# 349 "ljit_tilepro64.dasc"
	//|	move r0, L
	//|	jal &luaD_growCI
	//|	globals_LJ L->base
	//|	subidx CI, CI, 1
	//|	epilogue 8
	//|	jrp lr
	//|.align 64
	//|//-----------------------------------------------------------------------
	dasm_put(Dst, 1588, lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaD_growCI, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), -(1)*sizeof(CallInfo));
# 357 "ljit_tilepro64.dasc"

	status = luaJIT_link(J, &J->jsubmcode, &J->szjsubmcode, "ljit_tilepro64.dasc", "JSUB");
	if (status != JIT_S_OK)
		return status;

	/* Copy the callgates from the globals to the global state. */
	G(J->L)->jit_gateLJ = (luaJIT_GateLJ)J->jsub[JSUB_GATE_LJ];
	G(J->L)->jit_gateJL = (lua_CFunction)J->jsub[JSUB_GATE_JL];
	G(J->L)->jit_gateJC = (lua_CFunction)J->jsub[JSUB_GATE_JC];
	return JIT_S_OK;
}

static void jit_checkGC(jit_State *J)
{
	//|	move r0, L->l_G
	//|	move r1, GL:r0->GCthreshold
	//|	move r2, GL:r0->totalbytes
	//|	slte_u r0, r1, r2
	//|	bzt r0, >1
	//|	globals_JL
	//|	move r0, L
	//|	jal &luaC_step
	dasm_put(Dst, 1679, lo16(Dt1(->l_G)), ha16(Dt1(->l_G)), lo16(Dt7(->GCthreshold)), ha16(Dt7(->GCthreshold)), lo16(Dt7(->totalbytes)), ha16(Dt7(->totalbytes)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaC_step);
# 379 "ljit_tilepro64.dasc"
//	jit_emit_printf(J,"Collecting garbage");
	//|1:
	dasm_put(Dst, 1803);
# 381 "ljit_tilepro64.dasc"
}

# 401 "ljit_tilepro64.dasc"
/* Called before every instruction. */
static void jit_ins_start(jit_State *J)
{
	const Instruction thisins = *(J->nextins-1);
	//|=>J->nextpc:
	dasm_put(Dst, 1806, J->nextpc);
# 406 "ljit_tilepro64.dasc"
	jit_emit_stackdump(J, luaP_opnames[GET_OPCODE(thisins)], GETARG_A(thisins), GETARG_B(thisins), GETARG_C(thisins), GETARG_Bx(thisins));
}

/* Called after the last instruction has been encoded. */
static void jit_ins_last(jit_State *J, int lastpc, int sizemfm)
{
	//|=>lastpc+1:
	//|	.align 64			// Keep next section word aligned.
	//|//	.space 0x16
	//|	.word 0x0000ffff			// Terminate mfm with JIT_MFM_STOP.
	//|	.space sizemfm
	//|	.space 5 // Next mcode block pointer and size.
	//|	// The previous two awords are only word, but not aword aligned.
	//|	// Copying them is easier than aligning them and adjusting mfm handling.
	dasm_put(Dst, 1808, lastpc+1, sizemfm);
# 420 "ljit_tilepro64.dasc"
}


/* Encode JIT function prologue. */
static void jit_prologue(jit_State *J)
{
	Proto *pt = J->pt;
	int numparams = pt->numparams;
	int stacksize = pt->maxstacksize;

	//jit_emit_custom_stackdump(J,"PROLOGUE");

	jit_std_prologue(J, stacksize, J->pt->is_vararg);

	//|	addidx r4, BASE, numparams
	dasm_put(Dst, 1819, (numparams)*sizeof(TValue));
# 435 "ljit_tilepro64.dasc"

	if(!pt->is_vararg)
	{
		//|	wipe r4, TOP
		//|	wipe TOP, r9
		dasm_put(Dst, 1826, lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue));
# 440 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	wipe r4, r9
		dasm_put(Dst, 1899, lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue));
# 444 "ljit_tilepro64.dasc"
	}
	
	//|	move TOP, r9
	dasm_put(Dst, 1936);
# 447 "ljit_tilepro64.dasc"

# 455 "ljit_tilepro64.dasc"
}

static unsigned int returnHitCount = 0;
static void jit_op_return(jit_State *J, int rbase, int nresults)
{
	jit_emit_counter_break(J,&returnHitCount,6);

	/* TODO: RETURN hook */

	/* May need to close open upvalues. */
	if (!fhint_isset(J, NOCLOSE)) {
		//|	move r0, L
		//|	move r1, BASE
		//|	jal &luaF_close
		dasm_put(Dst, 1941, &luaF_close);
# 469 "ljit_tilepro64.dasc"
	}

	/* Go to the previous CallInfo, load the current into r7 */
	//|//	subidx BASE, BASE, 1 // This is the old pre-vararg way
	
	//|	addidx TVALUE:r5, BASE, rbase
	//|	move BASE, CI->func
	dasm_put(Dst, 1956, (rbase)*sizeof(TValue), lo16(Dt4(->func)), ha16(Dt4(->func)));
# 476 "ljit_tilepro64.dasc"
	
	//|	subidx CI, CI, 1
	dasm_put(Dst, 1977, -(1)*sizeof(CallInfo));
# 478 "ljit_tilepro64.dasc"

	/* Previous op was open: 'return f()' or 'return ...' */
	if (nresults < 0) {
		//|	move r6, BASE
		//|	loopstart TVALUE:r5, TOP
		//|		copyslot TVALUE:r6[0], TVALUE:r5[0]
		//|		addidx TVALUE:r6, TVALUE:r6, 1
		//|	loopendidxup TVALUE:r5, TOP
		//|	move TOP, r6
		dasm_put(Dst, 1984, lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), (1)*sizeof(TValue));
# 487 "ljit_tilepro64.dasc"
	}
	else
	{
		int i;
		for(i = 0; i < nresults; i++)
		{
			//|	copyslot BASE[i], TVALUE:r5[i]
			dasm_put(Dst, 2093, lo16(Dt8([i].value)), ha16(Dt8([i].value)), lo16(Dt2([i].value)), ha16(Dt2([i].value)), lo16(Dt8([i].value.na[1])), ha16(Dt8([i].value.na[1])), lo16(Dt2([i].value.na[1])), ha16(Dt2([i].value.na[1])), lo16(Dt8([i].tt)), ha16(Dt8([i].tt)), lo16(Dt2([i].tt)), ha16(Dt2([i].tt)));
# 494 "ljit_tilepro64.dasc"
		}
		//|//	addidx TVALUE:r8, BASE, nresults
		//|//	wipe r8, TOP
		//|	addidx TOP, BASE, nresults
		dasm_put(Dst, 2162, (nresults)*sizeof(TValue));
# 498 "ljit_tilepro64.dasc"
	}

	//jit_emit_custom_stackdump(J,"After RETURN");

	//|	epilogue LUAFUNC_STACK_SIZE
	//|	jrp lr
	dasm_put(Dst, 2169);
# 504 "ljit_tilepro64.dasc"
}

static void jit_op_call(jit_State *J, int func, int nargs, int nresults)
{
	//|	addidx BASE, BASE, func
	dasm_put(Dst, 2180, (func)*sizeof(TValue));
# 509 "ljit_tilepro64.dasc"
	if (nargs >= 0) {
		//|	addidx TOP, BASE, nargs+1
		dasm_put(Dst, 2187, (nargs+1)*sizeof(TValue));
# 511 "ljit_tilepro64.dasc"
	}
	//|	move LCL, BASE->value
	//|	movemwi CI->savedpc, J->nextins
	dasm_put(Dst, 2194, lo16(Dt2(->value)), ha16(Dt2(->value)), lo16(J->nextins), ha16(J->nextins), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)));
# 514 "ljit_tilepro64.dasc"

	/* TODO: Call metamethod */

	//|	jalr LCL->jit_gate		// Call JIT func or GATE_JL/GATE_JC.
	dasm_put(Dst, 2231, lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)));
# 518 "ljit_tilepro64.dasc"

	//jit_emit_custom_stackdump(J,"Before return from call");
	if (nresults >= 0) {
		//|	move r8, TOP
		//|	addidx TOP, BASE, nresults
		//|	wipe r8, TOP
		//|	move TOP, CI->top
		dasm_put(Dst, 2246, (nresults)*sizeof(TValue), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), lo16(Dt4(->top)), ha16(Dt4(->top)));
# 525 "ljit_tilepro64.dasc"
	}
	//|//	subidx BASE, BASE, func
	//|	move BASE, CI->base
	//|//	move LCL, BASE[-1].value
	//|	move r3, CI->func
	//|	move LCL, TVALUE:r3->value
	dasm_put(Dst, 2307, lo16(Dt4(->base)), ha16(Dt4(->base)), lo16(Dt4(->func)), ha16(Dt4(->func)), lo16(Dt8(->value)), ha16(Dt8(->value)));
# 531 "ljit_tilepro64.dasc"
}


static void jit_op_tailcall(jit_State *J, int func, int nargs)
{
	if (nargs >= 0) {
		//|	addidx TOP, BASE, func+nargs+1
		dasm_put(Dst, 2350, (func+nargs+1)*sizeof(TValue));
# 538 "ljit_tilepro64.dasc"
	}
	//|	addidx TVALUE:r4, BASE, func
	//|	move LCL, TVALUE:r4->value
	dasm_put(Dst, 2357, (func)*sizeof(TValue), lo16(Dt8(->value)), ha16(Dt8(->value)));
# 541 "ljit_tilepro64.dasc"

	//|	move BASE, CI->func
	//|	move r2, BASE
	dasm_put(Dst, 2378, lo16(Dt4(->func)), ha16(Dt4(->func)));
# 544 "ljit_tilepro64.dasc"
	
	//|	loopstart TVALUE:r4, TOP
	//|		copyslot TVALUE:r2[0], TVALUE:r4[0]
	//|		addidx TVALUE:r2, TVALUE:r2, 1
	//|	loopendidxup TVALUE:r4, TOP
	//|
	//|	move TOP, r2
	//|	subidx CI, CI, 1
	//|	movemwi CI->savedpc, J->nextins
	dasm_put(Dst, 2397, lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), (1)*sizeof(TValue), -(1)*sizeof(CallInfo), lo16(J->nextins), ha16(J->nextins), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)));
# 553 "ljit_tilepro64.dasc"

	//jit_emit_custom_stackdump(J,"IN TAILCALL");

	//|	epilogue LUAFUNC_STACK_SIZE
	//|	jr LCL->jit_gate
	dasm_put(Dst, 2530, lo16(Dt5(->jit_gate)), ha16(Dt5(->jit_gate)));
# 558 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_move(jit_State *J, int dest, int src)
{
	//|	copyslot BASE[dest], BASE[src]
	dasm_put(Dst, 2551, lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 565 "ljit_tilepro64.dasc"
}

static void jit_op_loadk(jit_State *J, int dest, int kidx)
{
	const TValue *kk = &J->pt->k[kidx];
/*	int rk = jit_return_k(J);
	if (rk) dest = 0;*/
	//|	movewi r1, kk
	//|	copyslot BASE[dest], TVALUE:r1[0]
	dasm_put(Dst, 2620, lo16(kk), ha16(kk), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 574 "ljit_tilepro64.dasc"
/*	if (rk) {
		//|	jrp lr
		dasm_put(Dst, 2699);
# 576 "ljit_tilepro64.dasc"
	}*/
}

static void jit_op_loadnil(jit_State *J, int first, int last)
{
	int i;
	for(i = first; i <= last; i++)
	{
		//|	setnilvalue BASE[i]
		dasm_put(Dst, 2704, lo16(Dt2([i].tt)), ha16(Dt2([i].tt)));
# 585 "ljit_tilepro64.dasc"
	}
}

static void jit_op_loadbool(jit_State *J, int dest, int b, int dojump)
{
	//|	setbvalue BASE[dest], b
	if (b) {  /* true */
	dasm_put(Dst, 2719, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
	} else {  /* false */
	dasm_put(Dst, 2748, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
	}
# 591 "ljit_tilepro64.dasc"
	if (dojump) {
		//|	j =>J->nextpc+1
		dasm_put(Dst, 2773, J->nextpc+1);
# 593 "ljit_tilepro64.dasc"
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_getupval(jit_State *J, int dest, int uvidx)
{
	//|	move UPVAL:r7, LCL->upvals[uvidx]
	//|	move TVALUE:r5, UPVAL:r7->v
	//|	copyslot BASE[dest], TVALUE:r5[0]
	dasm_put(Dst, 2780, lo16(Dt5(->upvals[uvidx])), ha16(Dt5(->upvals[uvidx])), lo16(Dt10(->v)), ha16(Dt10(->v)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 603 "ljit_tilepro64.dasc"
}

static void jit_op_setupval(jit_State *J, int src, int uvidx)
{
	//|	move UPVAL:r1, LCL->upvals[uvidx]
	//|	move TVALUE:r5, UPVAL:r1->v
	//|	copyslot TVALUE:r5[0], BASE[src]
	//|	movei r0, LUA_TSTRING
	//|	slte_u r8, r0, TVALUE:r5->tt
	//|	bz r8, >5
	//|4:
	//|	move GCOBJECT:r2, BASE[src].value
	//|	andi r3, GCOBJECT:r2->gch.marked, WHITEBITS	// && iswhite(val)
	//|	bz r3, >5
	dasm_put(Dst, 2877, lo16(Dt5(->upvals[uvidx])), ha16(Dt5(->upvals[uvidx])), lo16(Dt10(->v)), ha16(Dt10(->v)), lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8(->tt)), ha16(Dt8(->tt)), lo16(Dt2([src].value)), ha16(Dt2([src].value)), lo16(DtB(->gch.marked)), ha16(DtB(->gch.marked)), WHITEBITS);
# 617 "ljit_tilepro64.dasc"
	//|	andi r4, UPVAL:r1->marked, bitmask(BLACKBIT)	// && isblack(uv)
	//|	bz r4, >5
	//|	move r0, L
	//|	jal &luaC_barrierf
	//|5:
	dasm_put(Dst, 3033, lo16(Dt10(->marked)), ha16(Dt10(->marked)), bitmask(BLACKBIT), &luaC_barrierf);
# 622 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_newtable(jit_State *J, int dest, int lnarray, int lnhash)
{
	//|	move r0, L
	//|	movewi r1, luaO_fb2int(lnarray)
	//|	movewi r2, luaO_fb2int(lnhash)
	//|	globals_JL
	//|	jal &luaH_new
	//|	globals_LJ L->base
	//|	sethvaluer BASE[dest], r0
	dasm_put(Dst, 3074, lo16(luaO_fb2int(lnarray)), ha16(luaO_fb2int(lnarray)), lo16(luaO_fb2int(lnhash)), ha16(luaO_fb2int(lnhash)), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), &luaH_new, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)));
	dasm_put(Dst, 3215, lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 635 "ljit_tilepro64.dasc"
	jit_checkGC(J);
}

static void jit_op_getglobal(jit_State *J, int dest, int kidx)
{
	/* At this point, we just do a call to the Lua getfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	//|	movewi TSTRING:r2, &kk->value.gc->ts
	//|	addi r2, r2, #TSTRING
	//|	moveli r1, -10002	// LUA_GLOBALSINDEX
	//|	move r0, L
	//|
	//|	// lua_getfield puts something on the stack top, so set L->top
	//|	globals_JL_TOP
	//|	jal &lua_getfield
	//|
	//|	// Take the TValue that fell out of it and move to R(dest)
	//|	copyslot BASE[dest], TOP[0]
	dasm_put(Dst, 3230, lo16(&kk->value.gc->ts), ha16(&kk->value.gc->ts), sizeof(TString), lo16(Dt1(->top)), ha16(Dt1(->top)), &lua_getfield, lo16(Dt3([0].value)), ha16(Dt3([0].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt3([0].value.na[1])), ha16(Dt3([0].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 654 "ljit_tilepro64.dasc"
}

static void jit_op_setglobal(jit_State *J, int rval, int kidx)
{
	/* At this point, we just do a call to the Lua setfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	//|	movewi TSTRING:r2, &kk->value.gc->ts
	//|	addi r2, r2, #TSTRING
	//|	moveli r1, -10002	// LUA_GLOBALSINDEX
	//|	move r0, L
	//|
	//|	copyslot TOP[0], BASE[rval]
	//|	addidx TOP, TOP, 1
	//|
	//|	// lua_setfield gets something from the stack top, so set L->top
	//|	globals_JL_TOP
	//|	jal &lua_setfield
	//|	subidx TOP, TOP, 1
	dasm_put(Dst, 3343, lo16(&kk->value.gc->ts), ha16(&kk->value.gc->ts), sizeof(TString), lo16(Dt2([rval].value)), ha16(Dt2([rval].value)), lo16(Dt3([0].value)), ha16(Dt3([0].value)), lo16(Dt2([rval].value.na[1])), ha16(Dt2([rval].value.na[1])), lo16(Dt3([0].value.na[1])), ha16(Dt3([0].value.na[1])), lo16(Dt2([rval].tt)), ha16(Dt2([rval].tt)), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)), (1)*sizeof(TValue), lo16(Dt1(->top)), ha16(Dt1(->top)), &lua_setfield, -(1)*sizeof(TValue));
# 673 "ljit_tilepro64.dasc"
}

enum { TKEY_KSTR = -2, TKEY_STR = -1, TKEY_ANY = 0 };

static void jit_op_gettable(jit_State *J, int dest, int tab, int rkey)
{
	//|	move r0, L
	//|	addidx r1, BASE, tab
	dasm_put(Dst, 3468, (tab)*sizeof(TValue));
# 681 "ljit_tilepro64.dasc"
	if(ISK(rkey))
	{
		//|	movewi r2, &J->pt->k[INDEXK(rkey)]
		dasm_put(Dst, 3479, lo16(&J->pt->k[INDEXK(rkey)]), ha16(&J->pt->k[INDEXK(rkey)]));
# 684 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r2, BASE, rkey
		dasm_put(Dst, 3490, (rkey)*sizeof(TValue));
# 688 "ljit_tilepro64.dasc"
	}
	//|	addidx r3, BASE, dest
	//|	jal &luaV_gettable
	dasm_put(Dst, 3497, (dest)*sizeof(TValue), &luaV_gettable);
# 691 "ljit_tilepro64.dasc"
}

static void jit_op_settable(jit_State *J, int tab, int rkey, int rval)
{
	//|	move r0, L
	//|	addidx r1, BASE, tab
	dasm_put(Dst, 3510, (tab)*sizeof(TValue));
# 697 "ljit_tilepro64.dasc"
	if(ISK(rkey))
	{
		//|	movewi r2, &J->pt->k[INDEXK(rkey)]
		dasm_put(Dst, 3521, lo16(&J->pt->k[INDEXK(rkey)]), ha16(&J->pt->k[INDEXK(rkey)]));
# 700 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r2, BASE, rkey
		dasm_put(Dst, 3532, (rkey)*sizeof(TValue));
# 704 "ljit_tilepro64.dasc"
	}
	if(ISK(rval))
	{
		//|	movewi r3, &J->pt->k[INDEXK(rval)]
		dasm_put(Dst, 3539, lo16(&J->pt->k[INDEXK(rval)]), ha16(&J->pt->k[INDEXK(rval)]));
# 708 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	addidx r3, BASE, rval
		dasm_put(Dst, 3550, (rval)*sizeof(TValue));
# 712 "ljit_tilepro64.dasc"
	}
	//|	jal &luaV_settable
	dasm_put(Dst, 3557, &luaV_settable);
# 714 "ljit_tilepro64.dasc"
}

static void jit_op_self(jit_State *J, int dest, int tab, int rkey)
{
	//|	copyslot BASE[dest+1], BASE[tab]
	dasm_put(Dst, 3564, lo16(Dt2([tab].value)), ha16(Dt2([tab].value)), lo16(Dt2([dest+1].value)), ha16(Dt2([dest+1].value)), lo16(Dt2([tab].value.na[1])), ha16(Dt2([tab].value.na[1])), lo16(Dt2([dest+1].value.na[1])), ha16(Dt2([dest+1].value.na[1])), lo16(Dt2([tab].tt)), ha16(Dt2([tab].tt)), lo16(Dt2([dest+1].tt)), ha16(Dt2([dest+1].tt)));
# 719 "ljit_tilepro64.dasc"
	jit_op_gettable(J, dest, tab, rkey);
}

/* ------------------------------------------------------------------------ */

static void jit_op_setlist(jit_State *J, int ra, int num, int batch)
{
	if (batch == 0) { batch = (int)(*J->nextins); J->combine++; }
	batch = (batch-1)*LFIELDS_PER_FLUSH;
	if(num > 0) {
		//|	addidx TOP, BASE, ra+1+num
		dasm_put(Dst, 3633, (ra+1+num)*sizeof(TValue));
# 730 "ljit_tilepro64.dasc"
	}

	//|	push r30
	//|	push r31
	//|	push r32
	//|	push r33
	dasm_put(Dst, 3640);
# 736 "ljit_tilepro64.dasc"

	// TValue* r7 = start of new table values
	//|	addidx TVALUE:r30, BASE, ra+1
	dasm_put(Dst, 3673, (ra+1)*sizeof(TValue));
# 739 "ljit_tilepro64.dasc"

	// Table* r1 = our table
	//|	move TABLE:r31, BASE[ra].value.gc
	//|//	move TABLE:r31, GCOBJECT:r31->h
	dasm_put(Dst, 3680, lo16(Dt2([ra].value.gc)), ha16(Dt2([ra].value.gc)));
# 743 "ljit_tilepro64.dasc"

	// r9 = our batch
	//|	movewi r32, batch
	dasm_put(Dst, 3695, lo16(batch), ha16(batch));
# 746 "ljit_tilepro64.dasc"

	// Check if size is sufficient
	//|	sub TVALUE:r3, TOP, TVALUE:r30
	//|.if not TVALUE_SIZE == 16
	//|	.fatal Unsupported TVALUE size
	//|.endif
	//|	shri TVALUE:r3, TVALUE:r3, 4
	//|	add r33, r32, r3
	//|	slte_u r0, r33, TABLE:r31->sizearray
	//|	bnzt r0, >3
	dasm_put(Dst, 3706, lo16(DtD(->sizearray)), ha16(DtD(->sizearray)));
# 756 "ljit_tilepro64.dasc"
	
	// Otherwise, increase table size
	//|	move r2, r33
	//|	move r1, r31
	//|	move r0, L
	//|	jal &luaH_resizearray
	dasm_put(Dst, 3740, &luaH_resizearray);
# 762 "ljit_tilepro64.dasc"

	// Size is ok. now do the rest
	//|3:
	//|	loopstartidxdown TVALUE:r30, TOP
	//|		move r2, r33
	//|		move r1, r31
	//|		move r0, L
	//|		jal &luaH_setnum
	//|		copyslot TVALUE:r0[0], TOP[0]
	//|		barriert TABLE:r31, TOP
	dasm_put(Dst, 3759, -(1)*sizeof(TValue), &luaH_setnum, lo16(Dt3([0].value)), ha16(Dt3([0].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt3([0].value.na[1])), ha16(Dt3([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt3([0].tt)), ha16(Dt3([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt3(->tt)), ha16(Dt3(->tt)), lo16(Dt3(->value.gc)), ha16(Dt3(->value.gc)), lo16(DtB(->gch.marked)), ha16(DtB(->gch.marked)), WHITEBITS, lo16(DtD(->marked)), ha16(DtD(->marked)));
# 772 "ljit_tilepro64.dasc"
	//|		addi r33, r33, -1
	//|	loopend TVALUE:r30, TOP
	//|	move TOP, CI->top
	dasm_put(Dst, 3921, bitmask(BLACKBIT), lo16(DtD(->marked)), ha16(DtD(->marked)), lo16(DtD(->marked)), ha16(DtD(->marked)), ~bitmask(BLACKBIT)&0xff, lo16(Dt1(->l_G)), ha16(Dt1(->l_G)), lo16(Dt7(->grayagain)), ha16(Dt7(->grayagain)), lo16(DtD(->gclist)), ha16(DtD(->gclist)), lo16(Dt7(->grayagain)), ha16(Dt7(->grayagain)), lo16(Dt4(->top)), ha16(Dt4(->top)));
# 775 "ljit_tilepro64.dasc"

	// Popping
	//|	pop r33
	//|	pop r32
	//|	pop r31
	//|	pop r30
	dasm_put(Dst, 4034);
# 781 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_arith(jit_State *J, int dest, int rkb, int rkc, int ev)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	const Value *kval;
	int idx, rev;
	int target = (ev == TM_LT || ev == TM_LE) ? jit_jmp_target(J) : 0;

	/* The bytecode compiler already folds constants except for: k/0, k%0, */
	/* NaN results, k1<k2, k1<=k2. No point in optimizing these cases. */
	if (ISK(rkb&rkc)) goto fallback;

	/* Avoid optimization when non-numeric constants are present. */
	if (kkb ? !ttisnumber(kkb) : (kkc && !ttisnumber(kkc))) goto fallback;

	/* Load operands */
	if(kkb)
	{
		//|	movewi r6, kkb
		//|	loadnumber r0, r1, TVALUE:r6[0]
		dasm_put(Dst, 4067, lo16(kkb), ha16(kkb), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])));
# 805 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	loadnumber r0, r1, BASE[rkb]
		dasm_put(Dst, 4104, lo16(Dt2([rkb].value)), ha16(Dt2([rkb].value)), lo16(Dt2([rkb].value.na[1])), ha16(Dt2([rkb].value.na[1])));
# 809 "ljit_tilepro64.dasc"
	}

	if(kkc)
	{
		//|	movewi r6, kkc
		//|	loadnumber r2, r3, TVALUE:r6[0]
		dasm_put(Dst, 4131, lo16(kkc), ha16(kkc), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])));
# 815 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	loadnumber r2, r3, BASE[rkc]
		dasm_put(Dst, 4168, lo16(Dt2([rkc].value)), ha16(Dt2([rkc].value)), lo16(Dt2([rkc].value.na[1])), ha16(Dt2([rkc].value.na[1])));
# 819 "ljit_tilepro64.dasc"
	}

	/* Encode arithmetic operation. */
	switch (ev) {
	case TM_ADD:
		//|	jal &__float64_add
		dasm_put(Dst, 4195, &__float64_add);
# 825 "ljit_tilepro64.dasc"
		break;
	case TM_SUB:
		//|	jal &__float64_sub
		dasm_put(Dst, 4202, &__float64_sub);
# 828 "ljit_tilepro64.dasc"
		break;
	case TM_MUL:
		//|	jal &__float64_mul
		dasm_put(Dst, 4209, &__float64_mul);
# 831 "ljit_tilepro64.dasc"
		break;
	case TM_DIV:
		//|	jal &__float64_div
		dasm_put(Dst, 4216, &__float64_div);
# 834 "ljit_tilepro64.dasc"
		break;
	case TM_MOD:
		//|	jal &__float64_rem
		dasm_put(Dst, 4223, &__float64_rem);
# 837 "ljit_tilepro64.dasc"
		break;
	case TM_POW:
		//|	jal &pow
		dasm_put(Dst, 4230, &pow);
# 840 "ljit_tilepro64.dasc"
		break;
	case TM_UNM:
		//|	jal &__float64_neg
		dasm_put(Dst, 4237, &__float64_neg);
# 843 "ljit_tilepro64.dasc"
		break;
	case TM_LT:
		//|	jal &__float64_gcc_lt
		dasm_put(Dst, 4244, &__float64_gcc_lt);
# 846 "ljit_tilepro64.dasc"
		break;
	case TM_LE:
		//|	jal &__float64_gcc_le
		dasm_put(Dst, 4251, &__float64_gcc_le);
# 849 "ljit_tilepro64.dasc"
		break;
	default:
		break;
	}
fpstore:
	if(ev == TM_LT) {
		if(dest) {
			//|	blz r0, =>target
			dasm_put(Dst, 4258, target);
# 857 "ljit_tilepro64.dasc"
		}
		else {
			//|	bgez r0, =>target
			dasm_put(Dst, 4265, target);
# 860 "ljit_tilepro64.dasc"
		}
	}
	else if(ev == TM_LE) {
		if(dest) {
			//|	blez r0, =>target
			dasm_put(Dst, 4272, target);
# 865 "ljit_tilepro64.dasc"
		}
		else {
			//|	bgz r0, =>target
			dasm_put(Dst, 4279, target);
# 868 "ljit_tilepro64.dasc"
		}
	}
	else {
		/* Store result and set result type (if necessary). */
		//|	storenumber BASE[dest], r0, r1
		dasm_put(Dst, 4286, lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 873 "ljit_tilepro64.dasc"
		if (dest != rkb && dest != rkc) {
			//|	settti BASE[dest], LUA_TNUMBER
			dasm_put(Dst, 4325, lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 875 "ljit_tilepro64.dasc"
		}
	}
	return;
fallback:

	if (target) {  /* TM_LT or TM_LE. */
		if (kkb) {
			//|	movewi r1, kkb
			dasm_put(Dst, 4340, lo16(kkb), ha16(kkb));
# 883 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r1, BASE, rkb
			dasm_put(Dst, 4351, (rkb)*sizeof(TValue));
# 885 "ljit_tilepro64.dasc"
		}
		if (kkc) {
			//|	movewi r2, kkc
			dasm_put(Dst, 4358, lo16(kkc), ha16(kkc));
# 888 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r2, BASE, rkc
			dasm_put(Dst, 4369, (rkc)*sizeof(TValue));
# 890 "ljit_tilepro64.dasc"
		}
		//|	movemwi L->savedpc, J->nextins+1
		//|	move r0, L
		//|	jal ev==TM_LT?&luaV_lessthan:&luaV_lessequal
		dasm_put(Dst, 4376, lo16(J->nextins+1), ha16(J->nextins+1), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), ev==TM_LT?&luaV_lessthan:&luaV_lessequal);
# 894 "ljit_tilepro64.dasc"
		if (dest) {  /* cond */
			//|	bnz r0, =>target
			dasm_put(Dst, 4409, target);
# 896 "ljit_tilepro64.dasc"
		} else {
			//|	bz r0, =>target
			dasm_put(Dst, 4416, target);
# 898 "ljit_tilepro64.dasc"
		}
	} else {
		if (kkb) {
			//|	movewi r2, kkb
			dasm_put(Dst, 4423, lo16(kkb), ha16(kkb));
# 902 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r2, BASE, rkb
			dasm_put(Dst, 4434, (rkb)*sizeof(TValue));
# 904 "ljit_tilepro64.dasc"
		}
		if (kkc) {
			//|	movewi r3, kkc
			dasm_put(Dst, 4441, lo16(kkc), ha16(kkc));
# 907 "ljit_tilepro64.dasc"
		} else {
			//|	addidx r3, BASE, rkc
			dasm_put(Dst, 4452, (rkc)*sizeof(TValue));
# 909 "ljit_tilepro64.dasc"
		}
		//|	movemwi L->savedpc, J->nextins
		//|	move r0, L
		//|	addidx r1, BASE, dest
		//|	movei r4, ev
		//|	jal &luaV_arith
		dasm_put(Dst, 4459, lo16(J->nextins), ha16(J->nextins), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (dest)*sizeof(TValue), ev, &luaV_arith);
# 915 "ljit_tilepro64.dasc"
	}
}

/* ------------------------------------------------------------------------ */

static void jit_fallback_len(lua_State *L, StkId ra, const TValue *rb)
{
	switch (ttype(rb)) {
	case LUA_TTABLE:
		setnvalue(ra, cast_num(luaH_getn(hvalue(rb))));
		break;
	case LUA_TSTRING:
		setnvalue(ra, cast_num(tsvalue(rb)->len));
		break;
	default: {
		const TValue *tm = luaT_gettmbyobj(L, rb, TM_LEN);
		if (ttisfunction(tm)) {
			ptrdiff_t rasave = savestack(L, ra);
			setobj2s(L, L->top, tm);
			setobj2s(L, L->top+1, rb);
			luaD_checkstack(L, 2);
			L->top += 2;
			luaD_call(L, L->top - 2, 1);
			ra = restorestack(L, rasave);
			L->top--;
			setobjs2s(L, ra, L->top);
		} else {
			luaG_typeerror(L, rb, "get length of");
		}
		break;
	}
	}
}

static void jit_op_len(jit_State *J, int dest, int rb)
{
	//|	globals_JL
	//|	move r0, L
	//|	addidx r1, BASE, dest
	//|	addidx r2, BASE, rb
	//|	jal &jit_fallback_len
	//|	globals_LJ L->base
	dasm_put(Dst, 4504, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (dest)*sizeof(TValue), (rb)*sizeof(TValue), &jit_fallback_len, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 957 "ljit_tilepro64.dasc"
}

static void jit_op_not(jit_State *J, int dest, int rb)
{
	//|	move r0, BASE[rb].tt
	//|	move r4, BASE[rb].value
	//|	and r4, r4, r0
	//|	shri r0, r0, 1
	//|	or r4, r4, r0
	//|	seq r0, r4, zero
	//|	movei BASE[dest].tt, LUA_TBOOLEAN
	//|	move BASE[dest].value, r0
	dasm_put(Dst, 4625, lo16(Dt2([rb].tt)), ha16(Dt2([rb].tt)), lo16(Dt2([rb].value)), ha16(Dt2([rb].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)));
# 969 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_concat(jit_State *J, int dest, int first, int last)
{
	//|	globals_JL
	//|	move r0, L
	//|	movei r1, last-first+1   // GRAY ASSUME: !(last > 255)
	//|	movei r2, last
	//|	jal &luaV_concat
	//|	globals_LJ L->base
	dasm_put(Dst, 4698, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), last-first+1, last, &luaV_concat, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 981 "ljit_tilepro64.dasc"
	if(dest != first)
	{
		//|	copyslot BASE[dest], BASE[first]
		dasm_put(Dst, 4819, lo16(Dt2([first].value)), ha16(Dt2([first].value)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([first].value.na[1])), ha16(Dt2([first].value.na[1])), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), lo16(Dt2([first].tt)), ha16(Dt2([first].tt)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 984 "ljit_tilepro64.dasc"
	}
	jit_checkGC(J);
}

/* ------------------------------------------------------------------------ */

static void jit_op_eq(jit_State *J, int cond, int rkb, int rkc)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	int target = jit_jmp_target(J);
	if (kkb) {
		//|	movewi r1, kkb
		dasm_put(Dst, 4888, lo16(kkb), ha16(kkb));
# 997 "ljit_tilepro64.dasc"
	} else {
		//|	addidx r1, BASE, rkb
		dasm_put(Dst, 4899, (rkb)*sizeof(TValue));
# 999 "ljit_tilepro64.dasc"
	}
	if (kkc) {
		//|	movewi r2, kkc
		dasm_put(Dst, 4906, lo16(kkc), ha16(kkc));
# 1002 "ljit_tilepro64.dasc"
	} else {
		//|	addidx r2, BASE, rkc
		dasm_put(Dst, 4917, (rkc)*sizeof(TValue));
# 1004 "ljit_tilepro64.dasc"
	}

	//|	move r0, L
	//|	jal &luaV_equalval
	dasm_put(Dst, 4924, &luaV_equalval);
# 1008 "ljit_tilepro64.dasc"

	if(cond) {
		//|	bnz r0, =>target
		dasm_put(Dst, 4935, target);
# 1011 "ljit_tilepro64.dasc"
	}
	else {
		//|	bz r0, =>target
		dasm_put(Dst, 4942, target);
# 1014 "ljit_tilepro64.dasc"
	}
}


/* ------------------------------------------------------------------------ */

static void jit_op_test(jit_State *J, int cond, int dest, int src)
{
	int target = jit_jmp_target(J);

	/* l_isfalse() without a branch. But this time preserve tt/value. */
	/* (((value & tt) * 2 + tt) >> 1) is only zero for nil/false. */
	/* Assumes: 3*tt < 2^32, LUA_TNIL == 0, LUA_TBOOLEAN == 1, bvalue() == 0/1 */
	//|	move r0, BASE[src].tt
	//|	move r4, BASE[src].value
	//|	move r1, r0
	//|	and r1, r1, r4
	//|	shli r1, r1, 1
	//|	add r1, r1, r0
	//|	shri r1, r1, 1
	dasm_put(Dst, 4949, lo16(Dt2([src].tt)), ha16(Dt2([src].tt)), lo16(Dt2([src].value)), ha16(Dt2([src].value)));
# 1034 "ljit_tilepro64.dasc"

	/* Check if we can omit the stack copy. */
	if (dest == src) {  /* Yes, invert branch condition. */
		if (cond) {
			//|	bnz r1, =>target
			dasm_put(Dst, 4998, target);
# 1039 "ljit_tilepro64.dasc"
		} else {
			//|	bz r1, =>target
			dasm_put(Dst, 5005, target);
# 1041 "ljit_tilepro64.dasc"
		}
	} else {  /* No, jump around copy code. */
		if (cond) {
			//|	bz r1, >1
			dasm_put(Dst, 5012);
# 1045 "ljit_tilepro64.dasc"
		} else {
			//|	bnz r1, >1
			dasm_put(Dst, 5020);
# 1047 "ljit_tilepro64.dasc"
		}
		//|	move r3, BASE[src].value.na[1]
		//|	move BASE[dest].tt, r0
		//|	move BASE[dest].value, r4
		//|	move BASE[dest].value.na[1], r3
		//|	j =>target
		//|1:
		dasm_put(Dst, 5028, lo16(Dt2([src].value.na[1])), ha16(Dt2([src].value.na[1])), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].value.na[1])), ha16(Dt2([dest].value.na[1])), target);
# 1054 "ljit_tilepro64.dasc"
	}
}

static void jit_op_jmp(jit_State *J, int target)
{
	//|	j =>target
	dasm_put(Dst, 5093, target);
# 1060 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

enum { FOR_IDX, FOR_LIM, FOR_STP, FOR_EXT };

static const char *const jit_for_coerce_error[] = {
	LUA_QL("for") " initial value must be a number",
	LUA_QL("for") " limit must be a number",
	LUA_QL("for") " step must be a number",
};

static void jit_op_forprep(jit_State *J, int ra, int target)
{
	//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	//|	loadnumber r2, r3, BASE[ra+FOR_STP]
	//|	jal &__float64_sub
	//|	storenumber BASE[ra+FOR_IDX], r0, r1
	//|	j =>target
	dasm_put(Dst, 5100, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_sub, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_IDX].tt)), ha16(Dt2([ra+FOR_IDX].tt)), target);
# 1079 "ljit_tilepro64.dasc"
}

static void jit_op_forloop(jit_State *J, int ra, int target)
{
	//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	//|	loadnumber r2, r3, BASE[ra+FOR_STP]
	//|	jal &__float64_add
	//|	storenumber BASE[ra+FOR_IDX], r0, r1
	//|	storenumber BASE[ra+FOR_EXT], r0, r1
	dasm_put(Dst, 5203, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_add, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_IDX].tt)), ha16(Dt2([ra+FOR_IDX].tt)), lo16(Dt2([ra+FOR_EXT].value)), ha16(Dt2([ra+FOR_EXT].value)), lo16(Dt2([ra+FOR_EXT].value.na[1])), ha16(Dt2([ra+FOR_EXT].value.na[1])), lo16(Dt2([ra+FOR_EXT].tt)), ha16(Dt2([ra+FOR_EXT].tt)));
# 1088 "ljit_tilepro64.dasc"
	const TValue *step = hint_getpc(J, FOR_STEP_K, target-1);
	if (ttisnumber(step)) {
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		dasm_put(Dst, 5338, lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])));
# 1091 "ljit_tilepro64.dasc"
		if(nvalue(step) < (lua_Number)0) {
			//|	jal &__float64_gcc_ge
			//|	bgez r0, =>target
			dasm_put(Dst, 5365, &__float64_gcc_ge, target);
# 1094 "ljit_tilepro64.dasc"
		}
		else {
			//|	jal &__float64_gcc_le
			//|	blez r0, =>target
			dasm_put(Dst, 5378, &__float64_gcc_le, target);
# 1098 "ljit_tilepro64.dasc"
		}
	}
	else {
		//|	loadnumber r0, r1, BASE[ra+FOR_STP]
		//|	move r2, zero
		//|	move r3, zero
		//|	jal &__float64_gcc_lt	//
		//|	bgez r0, >3				// if (FOR_STP >= 0) goto >3
		//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		//|	jal &__float64_gcc_ge	// return FOR_IDX >= FOR_LIM
		//|	bgez r0, =>target
		//|	j >4
		//|3:
		//|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		//|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		dasm_put(Dst, 5391, lo16(Dt2([ra+FOR_STP].value)), ha16(Dt2([ra+FOR_STP].value)), lo16(Dt2([ra+FOR_STP].value.na[1])), ha16(Dt2([ra+FOR_STP].value.na[1])), &__float64_gcc_lt, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])), &__float64_gcc_ge, target, lo16(Dt2([ra+FOR_IDX].value)), ha16(Dt2([ra+FOR_IDX].value)), lo16(Dt2([ra+FOR_IDX].value.na[1])), ha16(Dt2([ra+FOR_IDX].value.na[1])), lo16(Dt2([ra+FOR_LIM].value)), ha16(Dt2([ra+FOR_LIM].value)), lo16(Dt2([ra+FOR_LIM].value.na[1])), ha16(Dt2([ra+FOR_LIM].value.na[1])));
# 1114 "ljit_tilepro64.dasc"
		//|	jal &__float64_gcc_le	// return FOR_IDX <= FOR_LIM
		//|	blez r0, =>target
		//|4:
		dasm_put(Dst, 5560, &__float64_gcc_le, target);
# 1117 "ljit_tilepro64.dasc"
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_tforloop(jit_State *J, int ra, int nresults)
{
	int target = jit_jmp_target(J);
	int i;
	for (i = 2; i >= 0; i--) {
		//|	copyslot BASE[ra+i+3], BASE[ra+i]  // Copy ctlvar/state/callable.
		dasm_put(Dst, 5579, lo16(Dt2([ra+i].value)), ha16(Dt2([ra+i].value)), lo16(Dt2([ra+i+3].value)), ha16(Dt2([ra+i+3].value)), lo16(Dt2([ra+i].value.na[1])), ha16(Dt2([ra+i].value.na[1])), lo16(Dt2([ra+i+3].value.na[1])), ha16(Dt2([ra+i+3].value.na[1])), lo16(Dt2([ra+i].tt)), ha16(Dt2([ra+i].tt)), lo16(Dt2([ra+i+3].tt)), ha16(Dt2([ra+i+3].tt)));
# 1128 "ljit_tilepro64.dasc"
	}
	jit_op_call(J, ra+3, 2, nresults);
	//|	isnil r0, ra+3
	//|	bnz r0, >1
	//|	copyslot BASE[ra+2], BASE[ra+3]	// Save control variable.
	//|	j =>target
	//|1:
	dasm_put(Dst, 5648, lo16(Dt2([ra+3].tt)), ha16(Dt2([ra+3].tt)), lo16(Dt2([ra+3].value)), ha16(Dt2([ra+3].value)), lo16(Dt2([ra+2].value)), ha16(Dt2([ra+2].value)), lo16(Dt2([ra+3].value.na[1])), ha16(Dt2([ra+3].value.na[1])), lo16(Dt2([ra+2].value.na[1])), ha16(Dt2([ra+2].value.na[1])), lo16(Dt2([ra+3].tt)), ha16(Dt2([ra+3].tt)), lo16(Dt2([ra+2].tt)), ha16(Dt2([ra+2].tt)), target);
# 1135 "ljit_tilepro64.dasc"
}

/* ------------------------------------------------------------------------ */

static void jit_op_close(jit_State *J, int ra)
{
	//|	move r0, L
	//|	addidx r1, BASE, ra
    //|	jal &luaF_close
    dasm_put(Dst, 5746, (ra)*sizeof(TValue), &luaF_close);
# 1144 "ljit_tilepro64.dasc"
}


static void jit_op_closure(jit_State *J, int dest, int ptidx)
{
	Proto *npt = J->pt->p[ptidx];
	int nup = npt->nups;
	const Instruction* pc = J->nextins;
	int j = 0;
	
	//|	move r0, L
	//|	movei r1, nup
	//|	move r2, LCL->env
	//|	jal &luaF_newLclosure
	//|	movemwi LCL:r0->p, npt			// Store new proto in returned closure.
	//|	setclvaluer BASE[dest], r0
	//|	push r30
	dasm_put(Dst, 5763, nup, lo16(Dt5(->env)), ha16(Dt5(->env)), &luaF_newLclosure, lo16(npt), ha16(npt), lo16(Dt5(->p)), ha16(Dt5(->p)), lo16(Dt2([dest].value)), ha16(Dt2([dest].value)), lo16(Dt2([dest].tt)), ha16(Dt2([dest].tt)));
# 1161 "ljit_tilepro64.dasc"
	for (j=0; j<nup; j++, pc++) {
		if (GET_OPCODE(*pc) == OP_GETUPVAL)
			//|	move LCL:r0->upvals[j], LCL->upvals[GETARG_B(*pc)]
			dasm_put(Dst, 5850, lo16(Dt5(->upvals[GETARG_B(*pc)])), ha16(Dt5(->upvals[GETARG_B(*pc)])), lo16(Dt5(->upvals[j])), ha16(Dt5(->upvals[j])));
# 1164 "ljit_tilepro64.dasc"
		else {
			//|//lua_assert(GET_OPCODE(*pc) == OP_MOVE);
			//|	move r30, r0
			//|	globals_JL
			//|	move r0, L
			//|	addidx r1, BASE, GETARG_B(*pc)
			//|	jal &luaF_findupval
			//|	move LCL:r30->upvals[j], UPVAL:r0
			//|	globals_LJ L->base
			dasm_put(Dst, 5875, lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->ci)), ha16(Dt1(->ci)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt4(->savedpc)), ha16(Dt4(->savedpc)), lo16(Dt1(->savedpc)), ha16(Dt1(->savedpc)), (GETARG_B(*pc))*sizeof(TValue), &luaF_findupval, lo16(Dt5(->upvals[j])), ha16(Dt5(->upvals[j])), lo16(Dt1(->base)), ha16(Dt1(->base)), lo16(Dt1(->top)), ha16(Dt1(->top)), lo16(Dt1(->ci)), ha16(Dt1(->ci)));
# 1173 "ljit_tilepro64.dasc"
		}
	}
	//|	pop r30
	dasm_put(Dst, 6008);
# 1176 "ljit_tilepro64.dasc"
	J->combine += nup;
	jit_checkGC(J);
}

/* ------------------------------------------------------------------------ */

static void jit_op_vararg(jit_State *J, int dest, int num)
{
	//|	move r2, CI->func
	//|	addidx TVALUE:r2, TVALUE:r2, J->pt->numparams+1
	//|	addidx TVALUE:r3, BASE, dest
	dasm_put(Dst, 6017, lo16(Dt4(->func)), ha16(Dt4(->func)), (J->pt->numparams+1)*sizeof(TValue), (dest)*sizeof(TValue));
# 1187 "ljit_tilepro64.dasc"
	
	if(num >= 0)
	{
		//|	addidx TVALUE:r4, TVALUE:r2, J->pt->numparams+num+1
		dasm_put(Dst, 6044, (J->pt->numparams+num+1)*sizeof(TValue));
# 1191 "ljit_tilepro64.dasc"
	}
	else
	{
		//|	move r4, BASE
		//|	sub r5, r4, r2
		//|	add TOP, r3, r5
		dasm_put(Dst, 6051);
# 1197 "ljit_tilepro64.dasc"
	}

	//|	loopstart TVALUE:r2, TVALUE:r4
		//|	copyslot TVALUE:r3[0], TVALUE:r2[0]
		//|	addidx TVALUE:r3, TVALUE:r3, 1
	//|	loopendidxup TVALUE:r2, TVALUE:r4
	dasm_put(Dst, 6064, lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value)), ha16(Dt8([0].value)), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].value.na[1])), ha16(Dt8([0].value.na[1])), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), lo16(Dt8([0].tt)), ha16(Dt8([0].tt)), (1)*sizeof(TValue), (1)*sizeof(TValue));
# 1203 "ljit_tilepro64.dasc"
	
}

/* ------------------------------------------------------------------------ */

void luaJIT_debugnotify(jit_State *J)
{
}

