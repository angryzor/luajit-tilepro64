/*
 * Random shit
 */

|.include ljit_tilepro64.dash
|.actionnames jit_actionnames
|.immencmodes
|.actionlist jit_actionlist
|.globals JSUB_
|
/* ------------------------------------------------------------------------ */
#define DASM_MAXSECTION 1

/* Arch string. */
const char luaJIT_arch[] = "tilepro64";

/* Forward declarations for C functions called from jsubs. */
static void jit_hookins(lua_State *L, const Instruction *newpc);
static void jit_gettable_fb(lua_State *L, Table *t, StkId dest);
static void jit_settable_fb(lua_State *L, Table *t, StkId val);

/* these are defined in libtile-cc */
extern double __float64_add(double,double);
extern double __float64_sub(double,double);
extern double __float64_mul(double,double);
extern double __float64_div(double,double);
extern double __float64_neg(double,double);
extern int __float64_gcc_lt(double,double);
extern int __float64_gcc_le(double,double);
extern int __float64_gcc_gt(double,double);
extern int __float64_gcc_ge(double,double);
#include <math.h>
#include <stdio.h>

// apparently got removed. using modf of a div now
double __float64_rem(double x, double y)
{
	double i;
	modf(x / y, &i);
	return x - y * i;
}

static void dumpstack(TValue* base, TValue* top, CallInfo* ci, lua_State* L, const char* opname, int ra, int rb, int rc, int rbx)
{
	TValue* s;

	FILE* f = fopen("log.log","a");
	fprintf(f,"------------------------------------------------------------------------\n");
	fprintf(f," PRE-OPCODE: %s,\t\tA = %08x, B = %08x, C = %08x, Bx = %08x\n", opname, ra, rb, rc, rbx);
	fprintf(f,"''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n");
	fprintf(f," L->base = %08x\n L->top = %08x\n L->ci = %08x\n L->stack = %08x\n L->stack_last = %08x\n\n", base - L->stack, top - L->stack, (unsigned int)ci, (unsigned int)L->stack, L->stack_last - L->stack);
	fprintf(f," CI->func = %08x\n CI->base = %08x\n CI->top = %08x\n\n", ci->func - L->stack, ci->base - L->stack, ci->top - L->stack);
	//fprintf(f," (CI-1)->func = %08x\n (CI-1)->base = %08x\n (CI-1)->top = %08x\n\n", (ci-1)->func - L->stack, (ci-1)->base - L->stack, (ci-1)->top - L->stack);
	fprintf(f," STACK:\n");
	for(s = L->stack; s <= L->stack_last; s++)
	{
		fprintf(f,"\t%08x | TYPE: ", s - L->stack);
		switch(s->tt)
		{
		case LUA_TNIL:
			fprintf(f,"nil\n");
			break;
		case LUA_TBOOLEAN:
			fprintf(f,"boolean: %d\n", bvalue(s));
			break;
		case LUA_TLIGHTUSERDATA:
			fprintf(f,"lightuserdata\n");
			break;
		case LUA_TNUMBER:
			fprintf(f,"number: %f\n", nvalue(s));
			break;
		case LUA_TSTRING:
			fprintf(f, "string: %s\n", getstr(rawtsvalue(s)));
			break;
		case LUA_TTABLE:
			fprintf(f, "table\n");
			break;
		case LUA_TFUNCTION:
			if(iscfunction(s))
				fprintf(f, "cfunction: %08x\n", (unsigned int)clvalue(s)->c.f);
			else
				fprintf(f, "lfunction\n");
			break;
		case LUA_TUSERDATA:
			fprintf(f, "userdata\n");
			break;
		case LUA_TTHREAD:
			fprintf(f, "thread\n");
			break;
		default:
			fprintf(f, "unknown: %d\n", s->tt);
			break;
		}
	}
	fprintf(f,"------------------------------------------------------------------------\n");
	fclose(f);
}

static void jit_emit_stackdump(jit_State *J, const char* curop_name, int ra, int rb, int rc, int rbx)
{
	|	move r0, BASE
	|	move r1, TOP
	|	move r2, CI
	|	move r3, L
	|	movewi r4, curop_name
	|	movewi r5, ra
	|	movewi r6, rb
	|	movewi r7, rc
	|	movewi r8, rbx
	|	jal &dumpstack
}

static void jit_emit_custom_stackdump(jit_State *J, const char* curop_name)
{
	jit_emit_stackdump(J,curop_name,0,0,0,0);
}


/* Detect CPU features and set JIT flags. */
static int jit_cpudetect(jit_State *J)
{
	return JIT_S_OK;
}

/* Check some assumptions. Should compile to nop. */
static int jit_consistency_check(jit_State *J)
{
/*	do {*/
		/* Force a compiler error for inconsistent structure sizes. */
		/* Check LUA_TVALUE_ALIGN in luaconf.h, too. */
/*		||int check_TVALUE_SIZE_in_ljit_x86_dash[1+TVALUE_SIZE-sizeof(TValue)];
		||int check_TVALUE_SIZE_in_ljit_x86_dash_[1+sizeof(TValue)-TVALUE_SIZE];
		((void)check_TVALUE_SIZE_in_ljit_x86_dash[0]);
		((void)check_TVALUE_SIZE_in_ljit_x86_dash_[0]);
		if (LUA_TNIL != 0 || LUA_TBOOLEAN != 1 || PCRLUA != 0) break;
		if ((int)&(((Node *)0)->i_val) != (int)&(((StkId)0)->value)) break;*/
		return JIT_S_OK;
/*	} while (0);
	J->dasmstatus = 999999999;*/  /* Recognizable error. */
/*	return JIT_S_COMPILER_ERROR;*/
}

static int jit_std_prologue(jit_State *J, int stacksize)
{
	|	prologue LUAFUNC_STACK_SIZE
	|
	//jit_emit_custom_stackdump(J,"Prologue");
	|
	|	addidx r9, BASE, stacksize+1
	|	movei r1, stacksize+1
	|	slt_u r0, r9, L->stack_last
	|	bnz r0, >1
	|	jal ->GROW_STACK
	|	addidx r9, BASE, stacksize+1 // this may get overwritten by the above function call.
	|1:
	|	// This is a slight overallocation (BASE[1+stacksize] would be enough).
	|	// We duplicate luaD_precall() behaviour so we can use luaD_growstack().
	|	seq r0, CI, L->end_ci
	|	bz r0, >2
	|	jal ->GROW_CI			// CI overflow?
	|	addidx r9, BASE, stacksize+1
	|2:
	|	addidx CI, CI, 1
	|	move CI->top, r9
	return 0;
}

/* Compile JIT subroutines (once). */
static int jit_compile_jsub(jit_State *J)
{
	int status = jit_consistency_check(J);
	if (status != JIT_S_OK) return status;
	status = jit_cpudetect(J);
	if (status != JIT_S_OK) return status;
	dasm_setup(Dst, jit_actionlist);
	|// Macros to reorder and combine JIT subroutine definitions.
	|.macro .jsub, name
	|.capture JSUB			// Add the entry point.
	||//-----------------------------------------------------------------------
	||//->name:
	|	.align 64
	|->name:
	|.endmacro
	|.macro .endjsub;  .endcapture; .endmacro
	|.macro .dumpjsub;  .dumpcapture JSUB; .endmacro
	|
	|// Little trick to avoid a small bug in the assembler (global label at address 0)
	|.align 64
	|.space 0x10
	||//-----------------------------------------------------------------------
	||// Procedure: GATE_LJ(lua_State* L, TValue* func, int nresults)
	||// L contains the Lua state
	||// func is the stack frame base pointer for this functions
	||// nresults is the amount of results the caller is expecting. rest should
	||//			be truncated
	||//---------------------
	|.align 64
	|->GATE_LJ:
	|	prologue 32
	|	// Preserve "global type" registers.
	|	preserveglobalregs
	|
	|	// Init our global types
	|	globals_LJ_L r0
	|	globals_LJ r1
	|	globals_LJ_LCL BASE->value	
	|
	|	// Prevent stackless yield. TODO: figure out what a stackless yield is.
	|	addi L->nCcalls, L->nCcalls, 1
	|
	|	// Store number of requested results.
	|	storeonstack r2, 28
	|
	//jit_emit_custom_stackdump(J,"Entering LJ gate");
	|
	|	// Call the gate, probably not compiled yet, but may be compiled.
	|	jalr LCL->jit_gate
	|
	|
	|	// Check if arg 3 was LUA_MULTRET
	|	loadfromstack r2, 28
	|	seqi r0, r2, -1
	|	bnz r0, >2		// If so, we can skip this
	|
	|	// Multiply number of values on stack by value size
	|	movei r5, #TOP
	|	mulw_uu r4, r2, r5
	|
	|	// Get index right above the last nresults. All
	|	add r8, BASE, r4
	|
	|	wipe r8, TOP
	|
	|	move TOP, CI->top
	|
	|2:
	|	addi L->nCcalls, L->nCcalls, -1
	|
	||	/* TODO: This causes the problems when calling an uncompiled func */
	|	move BASE, CI->base
	|	// Push our "fast" state to the "slow" interpreter state
	|	globals_JL
	|
	//jit_emit_custom_stackdump(J,"Returning from LJ gate");
	|
	|	// Restore "global type" registers
	|	restoreglobalregs
	|	movei r0, PCRC
	|
	|	epilogue 32
	|	jrp lr
	|
	|
	|
	|.align 64
	|->GATE_JL:
	|	prologue 8
	//jit_emit_custom_stackdump(J,"Entering JL gate");
	|	move PROTO:r6, LCL->p
	|	seqi r0, PROTO:r6->jit_status, JIT_S_OK
	|	bz r0, >1		// Already compiled?
	|
	|	// Yes, copy callgate...
	|	move r5, PROTO:r6->jit_mcode
	|	move LCL->jit_gate, r5
	|	jr r5
	|
	|	// No... Compile
	|1:
	|	globals_JL
	|	move r0, L
	|	move r1, BASE
	|	movei r2, -1
	|//	sub BASE, BASE, L->stack
	|	jal &luaD_precall
	|	bnzt r0, >2
	|
	|	move r0, L
	|	movei r1, 1
	|	jal &luaV_execute
	//jit_emit_custom_stackdump(J,"After executing uncompiled function");
	|
	|2:
	|//	add BASE, BASE, L->stack
	|	globals_LJ L->base
	//jit_emit_custom_stackdump(J,"Returning from JL gate");
	|	epilogue 8
	|	jrp lr
	|
	|.align 64
	|->GATE_JC:

	jit_std_prologue(J, LUA_MINSTACK);

	//jit_emit_custom_stackdump(J,"Entering JC gate");
	|	move CI->func, BASE
	|	move CCLOSURE:r7, BASE->value
	|	addidx BASE, BASE, 1
	|	move CI->base, BASE
	|	globals_JL
	|
	|	move r0, L
	|	jalr CCLOSURE:r7->f
	|
	|	globals_LJ L->base
	|
	|	subidx CI, CI, 1
	|	subidx BASE, BASE, 1
	|
	|	// Assume retval != LUA_MULTRET for now.
	|	movei r6, #TOP
	|	mulw_uu r3, r0, r6
	|
	|	sub r8, TOP, r3
	|	move r4, BASE
	|	slt_u r1, r8, TOP
	|	bz r1, >2
	|1:
	|	copyslot TVALUE:r4[0], TVALUE:r8[0]
	|	addi r4, r4, #TVALUE
	|	addi r8, r8, #TVALUE
	|	slt_u r1, r8, TOP
	|	bnzt r1, <1
	|2:
	|	add TOP, BASE, r3
	|
	//jit_emit_custom_stackdump(J,"Returning from JC gate");
	|	epilogue LUAFUNC_STACK_SIZE
	|	jrp lr
	|
	|.align 64
	|->GROW_STACK:
	|	prologue 8
	|	globals_JL
	|	move r0, L
	|	jal &luaD_growstack
	|	globals_LJ L->base
	|	epilogue 8
	|	jrp lr
	|.align 64
	|->GROW_CI:
	|	prologue 8
	|	globals_JL
	|	move r0, L
	|	jal &luaD_growCI
	|	globals_LJ L->base
	|	subidx CI, CI, 1
	|	epilogue 8
	|	jrp lr
	|.align 64
	|//-----------------------------------------------------------------------

	status = luaJIT_link(J, &J->jsubmcode, &J->szjsubmcode);
	if (status != JIT_S_OK)
		return status;

	/* Copy the callgates from the globals to the global state. */
	G(J->L)->jit_gateLJ = (luaJIT_GateLJ)J->jsub[JSUB_GATE_LJ];
	G(J->L)->jit_gateJL = (lua_CFunction)J->jsub[JSUB_GATE_JL];
	G(J->L)->jit_gateJC = (lua_CFunction)J->jsub[JSUB_GATE_JC];
	return JIT_S_OK;
}

#ifdef LUA_COMPAT_VARARG
static void jit_vararg_table(lua_State *L)
{
	Table *tab;
	StkId base, func;
	int i, num, numparams;
	luaC_checkGC(L);
	base = L->base;
	func = L->ci->func;
	numparams = clvalue(func)->l.p->numparams;
	num = base - func - numparams - 1;
	tab = luaH_new(L, num, 1);
	for (i = 0; i < num; i++)
		setobj2n(L, luaH_setnum(L, tab, i+1), base - num + i);
	setnvalue(luaH_setstr(L, tab, luaS_newliteral(L, "n")), (lua_Number)num);
	sethvalue(L, base + numparams, tab);
}
#endif
/* Called before every instruction. */
static void jit_ins_start(jit_State *J)
{
	const Instruction thisins = *(J->nextins-1);
	|=>J->nextpc:
	|	globals_JL
	|	move r0, L
	|	jit_debug_stackvalidator_check
	|	bnzt r0, >2
	|	// Force crash
	|	movei r2, 0
	|	sw r2, r2
	|2:
	|	move r0, L
	|	jit_debug_stackvalidator_step
	//jit_emit_stackdump(J, luaP_opnames[GET_OPCODE(thisins)], GETARG_A(thisins), GETARG_B(thisins), GETARG_C(thisins), GETARG_Bx(thisins));
}

/* Called after the last instruction has been encoded. */
static void jit_ins_last(jit_State *J, int lastpc, int sizemfm)
{
	|	.align 64			// Keep next section word aligned.
	|	.space 0x16
	|	.word 0x0000ffff			// Terminate mfm with JIT_MFM_STOP.
	|	.space 5 // Next mcode block pointer and size.
	|	// The previous two awords are only word, but not aword aligned.
	|	// Copying them is easier than aligning them and adjusting mfm handling.
}


/* Encode JIT function prologue. */
static void jit_prologue(jit_State *J)
{
	Proto *pt = J->pt;
	int numparams = pt->numparams;
	int stacksize = pt->maxstacksize;

	jit_std_prologue(J, stacksize);

	// Slower
	|	move CI->func, BASE // Used to be removed
	|	addidx BASE, BASE, 1
	|	move CI->base, BASE // Used to be removed

	if(!pt->is_vararg)
	{
		|//	addidx TVALUE:r8, BASE, numparams
		|	wipe TOP, r9
	}

	|	move TOP, r9

#if 0
#ifdef LUA_COMPAT_VARARG
	if (pt->is_vararg & VARARG_NEEDSARG) {
	  |	call &jit_vararg_table, L
	}
#endif
#endif
}

static void jit_op_return(jit_State *J, int rbase, int nresults)
{
	/* TODO: RETURN hook */

	/* May need to close open upvalues. */
	if (!fhint_isset(J, NOCLOSE)) {
		|	move r0, L
		|	move r1, BASE
		|	jal &luaF_close
	}

	/* Go to the previous CallInfo, load the current into r7 */
	|//	move CINFO:r7, CI
	|	subidx CI, CI, 1
	|	subidx BASE, BASE, 1

	/* Previous op was open: 'return f()' or 'return ...' */
	if (nresults < 0) {
		|	subidx TOP, TOP, 1
		|	move SCRATCHTV, BASE
		|	slt_u r0, SCRATCHTV, TOP
		|	bz r0, >2
		|1:
		|	copyslot SCRATCHTV[0], SCRATCHTV[1]
		|	addidx SCRATCHTV, SCRATCHTV, 1
		|	slt_u r0, SCRATCHTV, TOP
		|	bnzt r0, <1
		|2:
		|	setnilvalue TOP[0]
	}
	else
	{
		int i;
		for(i = 0; i < nresults; i++)
		{
			|	copyslot BASE[i], BASE[rbase+i+1]
		}
		|//	addidx TVALUE:r8, BASE, nresults
		|//	wipe r8, TOP
		|	addidx TOP, BASE, nresults
	}

	//jit_emit_custom_stackdump(J,"After RETURN");

	|	epilogue LUAFUNC_STACK_SIZE
	|	jrp lr
}

static void jit_op_call(jit_State *J, int func, int nargs, int nresults)
{
	|	addidx BASE, BASE, func
	if (nargs >= 0) {
		|	addidx TOP, BASE, nargs+1
	}
	|	move LCL, BASE->value
	|	movemwi CI->savedpc, J->nextins

	/* TODO: Call metamethod */

	|	jalr LCL->jit_gate		// Call JIT func or GATE_JL/GATE_JC.

	//jit_emit_custom_stackdump(J,"Before return from call");
	if (nresults >= 0) {
		|	move r8, TOP
		|	addidx TOP, BASE, nresults
		|	wipe r8, TOP
		|	move TOP, CI->top
	}
	|//	subidx BASE, BASE, func
	|	move BASE, CI->base
	|	move LCL, BASE[-1].value
}


static void jit_op_tailcall(jit_State *J, int func, int nargs)
{
}

/* ------------------------------------------------------------------------ */

static void jit_op_move(jit_State *J, int dest, int src)
{
	|	copyslot BASE[dest], BASE[src]
}

static void jit_op_loadk(jit_State *J, int dest, int kidx)
{
	const TValue *kk = &J->pt->k[kidx];
/*	int rk = jit_return_k(J);
	if (rk) dest = 0;*/
	|	movewi r1, kk
	|	copyslot BASE[dest], TVALUE:r1[0]
/*	if (rk) {
		|	jrp lr
	}*/
}

static void jit_op_loadnil(jit_State *J, int first, int last)
{
	int i;
	for(i = first; i <= last; i++)
	{
		|	setnilvalue BASE[i]
	}
}

static void jit_op_loadbool(jit_State *J, int dest, int b, int dojump)
{
	|	setbvalue BASE[dest], b
	if (dojump) {
		|	j =>J->nextpc+1
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_getupval(jit_State *J, int dest, int uvidx)
{
	|	move UPVAL:r7, LCL->upvals[uvidx]
	|	move TVALUE:r5, UPVAL:r7->v
	|	copyslot BASE[dest], TVALUE:r5[0]
}

static void jit_op_setupval(jit_State *J, int src, int uvidx)
{
	|	move UPVAL:r1, LCL->upvals[uvidx]
	|	move TVALUE:r5, UPVAL:r1->v
	|	copyslot TVALUE:r5[0], BASE[src]
	|	movei r0, LUA_TSTRING
	|	slte_u r8, r0, TVALUE:r5->tt
	|	bz r8, >5
	|4:
	|	move GCOBJECT:r2, BASE[src].value
	|	andi r3, GCOBJECT:r2->gch.marked, WHITEBITS	// && iswhite(val)
	|	bz r3, >5
	|	andi r4, UPVAL:r1->marked, bitmask(BLACKBIT)	// && isblack(uv)
	|	bz r4, >5
	|	move r0, L
	|	jal &luaC_barrierf
	|5:
}

/* ------------------------------------------------------------------------ */

static void jit_op_newtable(jit_State *J, int dest, int lnarray, int lnhash)
{
	|	move r0, L
	|	movewi r1, luaO_fb2int(lnarray)
	|	movewi r2, luaO_fb2int(lnhash)
	|	globals_JL
	|	jal &luaH_new
	|	globals_LJ L->base
	|	sethvaluer BASE[dest], r0
/* TODO	jit_checkGC(J);*/
}

static void jit_op_getglobal(jit_State *J, int dest, int kidx)
{
	/* At this point, we just do a call to the Lua getfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	|	movewi TSTRING:r2, &kk->value.gc->ts
	|	addi r2, r2, #TSTRING
	|	moveli r1, -10002	// LUA_GLOBALSINDEX
	|	move r0, L
	|
	|	// lua_getfield puts something on the stack top, so set L->top
	|	globals_JL_TOP
	|	jal &lua_getfield
	|
	|	// Take the TValue that fell out of it and move to R(dest)
	|	copyslot BASE[dest], TOP[0]
}

static void jit_op_setglobal(jit_State *J, int rval, int kidx)
{
	/* At this point, we just do a call to the Lua setfield function here */
	const TValue *kk = &J->pt->k[kidx];
	jit_assert(ttisstring(kk));
	|	movewi TSTRING:r2, &kk->value.gc->ts
	|	addi r2, r2, #TSTRING
	|	moveli r1, -10002	// LUA_GLOBALSINDEX
	|	move r0, L
	|
	|	addidx TOP, TOP, 1
	|	copyslot TOP[0], BASE[rval]
	|
	|	// lua_setfield gets something from the stack top, so set L->top
	|	globals_JL_TOP
	|	jal &lua_setfield
	|
}

enum { TKEY_KSTR = -2, TKEY_STR = -1, TKEY_ANY = 0 };

static void jit_op_gettable(jit_State *J, int dest, int tab, int rkey)
{
	|	move r0, L
	|	addidx r1, BASE, tab
	if(ISK(rkey))
	{
		|	movewi r2, &J->pt->k[INDEXK(rkey)]
	}
	else
	{
		|	addidx r2, BASE, rkey
	}
	|	addidx r3, BASE, dest
	|	jal &luaV_gettable
}

static void jit_op_settable(jit_State *J, int tab, int rkey, int rval)
{
	|	move r0, L
	|	addidx r1, BASE, tab
	if(ISK(rkey))
	{
		|	movewi r2, &J->pt->k[INDEXK(rkey)]
	}
	else
	{
		|	addidx r2, BASE, rkey
	}
	if(ISK(rval))
	{
		|	movewi r3, &J->pt->k[INDEXK(rval)]
	}
	else
	{
		|	addidx r3, BASE, rval
	}
	|	jal &luaV_settable
}

static void jit_op_self(jit_State *J, int dest, int tab, int rkey)
{
	|	copyslot BASE[dest+1], BASE[tab]
	jit_op_gettable(J, dest, tab, rkey);
}

/* ------------------------------------------------------------------------ */

static void jit_op_setlist(jit_State *J, int ra, int num, int batch)
{
	if (batch == 0) { batch = (int)(*J->nextins); J->combine++; }
	batch = (batch-1)*LFIELDS_PER_FLUSH;
	if(num == 0) {
		|	push r30
		|	push r31
		|	push r32
		|	push r33

		// TValue* r7 = start of new table values
		|	addidx TVALUE:r30, BASE, ra+1

		// Table* r1 = our table
		|	move TABLE:r31, BASE[ra].value.gc
		|//	move TABLE:r31, GCOBJECT:r31->h

		// r9 = our batch
		|	movewi r32, batch

		// Check if size is sufficient
		|	sub TVALUE:r3, TOP, TVALUE:r30
		|.if not TVALUE_SIZE == 16
		|	.fatal Unsupported TVALUE size
		|.endif
		|	shri TVALUE:r3, TVALUE:r3, 4
		|	add r33, r32, r3
		|	slte_u r0, r33, TABLE:r31->sizearray
		|	bnzt r0, >3
		
		// Otherwise, increase table size
		|	move r2, r33
		|	move r1, r31
		|	move r0, L
		|	jal &luaH_resizearray

		// Size is ok. now do the rest
		|3:
		|	slt_u r0, TVALUE:r30, TOP
		|	bz r0, >5
		|4:
		|	subidx TOP, TOP, 1
		|	move r2, r33
		|	move r1, r31
		|	move r0, L
		|	jal &luaH_setnum
		|	copyslot TVALUE:r0[0], TOP[0]
		|	barriert TABLE:r31, TOP
		|	addi r33, r33, -1
		|	slt_u r0, TVALUE:r30, TOP
		|	bnzt r0, <4
		|5:
		|	move TOP, CI->top

		// Popping
		|	pop r33
		|	pop r32
		|	pop r31
		|	pop r30
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_arith(jit_State *J, int dest, int rkb, int rkc, int ev)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	const Value *kval;
	int idx, rev;
	int target = (ev == TM_LT || ev == TM_LE) ? jit_jmp_target(J) : 0;

	/* The bytecode compiler already folds constants except for: k/0, k%0, */
	/* NaN results, k1<k2, k1<=k2. No point in optimizing these cases. */
	if (ISK(rkb&rkc)) goto fallback;

	/* Avoid optimization when non-numeric constants are present. */
	if (kkb ? !ttisnumber(kkb) : (kkc && !ttisnumber(kkc))) goto fallback;

	/* Load operands */
	if(kkb)
	{
		|	movewi r6, kkb
		|	loadnumber r0, r1, TVALUE:r6[0]
	}
	else
	{
		|	loadnumber r0, r1, BASE[rkb]
	}

	if(kkc)
	{
		|	movewi r6, kkc
		|	loadnumber r2, r3, TVALUE:r6[0]
	}
	else
	{
		|	loadnumber r2, r3, BASE[rkc]
	}

	/* Encode arithmetic operation. */
	switch (ev) {
	case TM_ADD:
		|	jal &__float64_add
		break;
	case TM_SUB:
		|	jal &__float64_sub
		break;
	case TM_MUL:
		|	jal &__float64_mul
		break;
	case TM_DIV:
		|	jal &__float64_div
		break;
	case TM_MOD:
		|	jal &__float64_rem
		break;
	case TM_POW:
		|	jal &pow
		break;
	case TM_UNM:
		|	jal &__float64_neg
		break;
	case TM_LT:
		|	jal &__float64_gcc_lt
		break;
	case TM_LE:
		|	jal &__float64_gcc_le
		break;
	default:
		break;
	}
fpstore:
	if(ev == TM_LT) {
		if(dest) {
			|	blz r0, =>target
		}
		else {
			|	bgez r0, =>target
		}
	}
	else if(ev == TM_LE) {
		if(dest) {
			|	blez r0, =>target
		}
		else {
			|	bgz r0, =>target
		}
	}
	else {
		/* Store result and set result type (if necessary). */
		|	storenumber BASE[dest], r0, r1
		if (dest != rkb && dest != rkc) {
			|	settti BASE[dest], LUA_TNUMBER
		}
	}
	return;
fallback:

	if (target) {  /* TM_LT or TM_LE. */
		if (kkb) {
			|	movewi r1, kkb
		} else {
			|	addidx r1, BASE, rkb
		}
		if (kkc) {
			|	movewi r2, kkc
		} else {
			|	addidx r2, BASE, rkc
		}
		|	movemwi L->savedpc, J->nextins+1
		|	move r0, L
		|	jal ev==TM_LT?&luaV_lessthan:&luaV_lessequal
		if (dest) {  /* cond */
			|	bnz r0, =>target
		} else {
			|	bz r0, =>target
		}
	} else {
		if (kkb) {
			|	movewi r2, kkb
		} else {
			|	addidx r2, BASE, rkb
		}
		if (kkc) {
			|	movewi r3, kkc
		} else {
			|	addidx r3, BASE, rkc
		}
		|	movemwi L->savedpc, J->nextins
		|	move r0, L
		|	addidx r1, BASE, dest
		|	movei r4, ev
		|	jal &luaV_arith
	}
}

/* ------------------------------------------------------------------------ */

static void jit_fallback_len(lua_State *L, StkId ra, const TValue *rb)
{
	switch (ttype(rb)) {
	case LUA_TTABLE:
		setnvalue(ra, cast_num(luaH_getn(hvalue(rb))));
		break;
	case LUA_TSTRING:
		setnvalue(ra, cast_num(tsvalue(rb)->len));
		break;
	default: {
		const TValue *tm = luaT_gettmbyobj(L, rb, TM_LEN);
		if (ttisfunction(tm)) {
			ptrdiff_t rasave = savestack(L, ra);
			setobj2s(L, L->top, tm);
			setobj2s(L, L->top+1, rb);
			luaD_checkstack(L, 2);
			L->top += 2;
			luaD_call(L, L->top - 2, 1);
			ra = restorestack(L, rasave);
			L->top--;
			setobjs2s(L, ra, L->top);
		} else {
			luaG_typeerror(L, rb, "get length of");
		}
		break;
	}
	}
}

static void jit_op_len(jit_State *J, int dest, int rb)
{
	|	globals_JL
	|	move r0, L
	|	addidx r1, BASE, dest
	|	addidx r2, BASE, rb
	|	jal &jit_fallback_len
	|	globals_LJ L->base
}

static void jit_op_not(jit_State *J, int dest, int rb)
{
	|	move r0, BASE[rb].tt
	|	move r4, BASE[rb].value
	|	and r4, r4, r0
	|	shri r0, r0, 1
	|	or r4, r4, r0
	|	seq r0, r4, zero
	|	movei BASE[dest].tt, LUA_TBOOLEAN
	|	move BASE[dest].value, r0
}

/* ------------------------------------------------------------------------ */

static void jit_op_concat(jit_State *J, int dest, int first, int last)
{
	|	globals_JL
	|	move r0, L
	|	movei r1, last-first+1   // GRAY ASSUME: !(last > 255)
	|	movei r2, last
	|	jal &luaV_concat
	|	globals_LJ L->base
	if(dest != first)
	{
		|	copyslot BASE[dest], BASE[first]
	}
	/* TODO: jit_checkGC(J); */
}

/* ------------------------------------------------------------------------ */

static void jit_op_eq(jit_State *J, int cond, int rkb, int rkc)
{
	const TValue *kkb = ISK(rkb) ? &J->pt->k[INDEXK(rkb)] : NULL;
	const TValue *kkc = ISK(rkc) ? &J->pt->k[INDEXK(rkc)] : NULL;
	int target = jit_jmp_target(J);
	if (kkb) {
		|	movewi r1, kkb
	} else {
		|	addidx r1, BASE, rkb
	}
	if (kkc) {
		|	movewi r2, kkc
	} else {
		|	addidx r2, BASE, rkc
	}

	|	move r0, L
	|	jal &luaV_equalval

	if(cond) {
		|	bnz r0, =>target
	}
	else {
		|	bz r0, =>target
	}
}


/* ------------------------------------------------------------------------ */

static void jit_op_test(jit_State *J, int cond, int dest, int src)
{
	int target = jit_jmp_target(J);

	/* l_isfalse() without a branch. But this time preserve tt/value. */
	/* (((value & tt) * 2 + tt) >> 1) is only zero for nil/false. */
	/* Assumes: 3*tt < 2^32, LUA_TNIL == 0, LUA_TBOOLEAN == 1, bvalue() == 0/1 */
	|	move r0, BASE[src].tt
	|	move r4, BASE[src].value
	|	move r1, r0
	|	and r1, r1, r4
	|	shli r1, r1, 1
	|	add r1, r1, r0
	|	shri r1, r1, 1

	/* Check if we can omit the stack copy. */
	if (dest == src) {  /* Yes, invert branch condition. */
		if (cond) {
			|	bnz r1, =>target
		} else {
			|	bz r1, =>target
		}
	} else {  /* No, jump around copy code. */
		if (cond) {
			|	bz r1, >1
		} else {
			|	bnz r1, >1
		}
		|	move r3, BASE[src].value.na[1]
		|	move BASE[dest].tt, r0
		|	move BASE[dest].value, r4
		|	move BASE[dest].value.na[1], r3
		|	j =>target
		|1:
	}
}

static void jit_op_jmp(jit_State *J, int target)
{
	|	j =>target
}

/* ------------------------------------------------------------------------ */

enum { FOR_IDX, FOR_LIM, FOR_STP, FOR_EXT };

static const char *const jit_for_coerce_error[] = {
	LUA_QL("for") " initial value must be a number",
	LUA_QL("for") " limit must be a number",
	LUA_QL("for") " step must be a number",
};

static void jit_op_forprep(jit_State *J, int ra, int target)
{
	|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	|	loadnumber r2, r3, BASE[ra+FOR_STP]
	|	jal &__float64_sub
	|	storenumber BASE[ra+FOR_IDX], r0, r1
	|	j =>target
}

static void jit_op_forloop(jit_State *J, int ra, int target)
{
	|	loadnumber r0, r1, BASE[ra+FOR_IDX]
	|	loadnumber r2, r3, BASE[ra+FOR_STP]
	|	jal &__float64_add
	|	storenumber BASE[ra+FOR_IDX], r0, r1
	|	storenumber BASE[ra+FOR_EXT], r0, r1
	const TValue *step = hint_getpc(J, FOR_STEP_K, target-1);
	if (ttisnumber(step)) {
		|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		if(nvalue(step) < (lua_Number)0) {
			|	jal &__float64_gcc_ge
			|	bgez r0, =>target
		}
		else {
			|	jal &__float64_gcc_le
			|	blez r0, =>target
		}
	}
	else {
		|	loadnumber r0, r1, BASE[ra+FOR_STP]
		|	move r2, zero
		|	move r3, zero
		|	jal &__float64_gcc_lt	//
		|	bgez r0, >3				// if (FOR_STP >= 0) goto >3
		|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		|	jal &__float64_gcc_ge	// return FOR_IDX >= FOR_LIM
		|	bgez r0, =>target
		|	j >4
		|3:
		|	loadnumber r0, r1, BASE[ra+FOR_IDX]
		|	loadnumber r2, r3, BASE[ra+FOR_LIM]
		|	jal &__float64_gcc_le	// return FOR_IDX <= FOR_LIM
		|	blez r0, =>target
		|4:
	}
}

/* ------------------------------------------------------------------------ */

static void jit_op_tforloop(jit_State *J, int ra, int nresults)
{
	int target = jit_jmp_target(J);
	int i;
	for (i = 2; i >= 0; i--) {
		|	copyslot BASE[ra+i+3], BASE[ra+i]  // Copy ctlvar/state/callable.
	}
	jit_op_call(J, ra+3, 2, nresults);
	|	isnil r0, ra+3
	|	bnz r0, >1
	|	copyslot BASE[ra+2], BASE[ra+3]	// Save control variable.
	|	j =>target
	|1:
}

/* ------------------------------------------------------------------------ */

static void jit_op_close(jit_State *J, int ra)
{
	|	move r0, L
	|	addidx r1, BASE, ra
    |	jal &luaF_close
}


static void jit_op_closure(jit_State *J, int dest, int ptidx)
{
	Proto *npt = J->pt->p[ptidx];
	int nup = npt->nups;
	const Instruction* pc = J->nextins;
	int j = 0;
	
	|	move r0, L
	|	movei r1, nup
	|	move r2, LCL->env
	|	jal &luaF_newLclosure
	|	movemwi LCL:r0->p, npt			// Store new proto in returned closure.
	|	setclvaluer BASE[dest], r0
	|	push r30
	for (j=0; j<nup; j++, pc++) {
		if (GET_OPCODE(*pc) == OP_GETUPVAL)
			|	move LCL:r0->upvals[j], LCL->upvals[GETARG_B(*pc)]
		else {
			|//lua_assert(GET_OPCODE(*pc) == OP_MOVE);
			|	move r30, r0
			|	globals_JL
			|	move r0, L
			|	addidx r1, BASE, GETARG_B(*pc)
			|	jal &luaF_findupval
			|	move LCL:r30->upvals[j], UPVAL:r0
			|	globals_LJ L->base
		}
	}
	|	pop r30
	J->combine += nup;
	/* TODO jit_checkGC(J); */
}

/* ------------------------------------------------------------------------ */

static void jit_op_vararg(jit_State *J, int dest, int num)
{
}

/* ------------------------------------------------------------------------ */

void luaJIT_debugnotify(jit_State *J)
{
}

