|.arch tilepro64
|.section code
|
|// Types
|.type L,		lua_State,	r42
|.type BASE,	TValue,		r43
|.type TOP,		TValue,		r44
|.type CI,		CallInfo,	r45
|.type LCL,		LClosure,	r46
|
|// Types
|.type GL,			global_State
|.type TVALUE,		TValue
|.type VALUE,		Value
|.type CINFO,		CallInfo
|.type GCOBJECT,	GCObject
|.type TSTRING,		TString
|.type TABLE,		Table
|.type CCLOSURE,	CClosure
|.type PROTO,		Proto
|.type UPVAL,		UpVal
|.type NODE,		Node
|
|// Definitions copied to DynASM domain to avoid unnecessary constant args.
|// CHECK: must match with the definitions in lua.h!
|.define LUA_TNIL,				0
|.define LUA_TBOOLEAN,			1
|.define LUA_TLIGHTUSERDATA,	2
|.define LUA_TNUMBER,			3
|.define LUA_TSTRING,			4
|.define LUA_TTABLE,			5
|.define LUA_TFUNCTION,			6
|.define LUA_TUSERDATA,			7
|.define LUA_TTHREAD,			8
|
|.define LUA_TNUM_NUM,		0x33
|.define LUA_TNUM_NUM_NUM,	0x333
|.define LUA_TSTR_STR,		0x44
|.define LUA_TSTR_NUM,		0x43
|.define LUA_TSTR_NUM_NUM,	0x433
|.define LUA_TTABLE_NUM,	0x53
|.define LUA_TTABLE_STR,	0x54
|
|.macro istt, idx, tp; sub r25, BASE[idx].tt, tp; .endmacro
|.macro isnil, idx; istt idx, LUA_TNIL; .endmacro
|.macro isnumber, idx;  istt idx, LUA_TNUMBER; .endmacro
|.macro isstring, idx;  istt idx, LUA_TSTRING; .endmacro
|.macro istable, idx;  istt idx, LUA_TTABLE; .endmacro
|.macro isfunction, idx;  istt idx, LUA_TFUNCTION; .endmacro
|
|
|// Assembler pseudo instructions. Should actually be put in dynasm, putting them here for now
|.macro move, dst, src; or dst, src, zero; .endmacro
|.macro movei, dst, simm8; ori dst, zero, simm8; .endmacro
|.macro moveli, dst, simm16; addli dst, zero, simm16; .endmacro
|.macro movelis, dst, simm16; addlis dst, zero, simm16; .endmacro
|.macro prefetch, src; lb_u zero, src; .endmacro
|.macro bpt; ill; .endmacro
|.macro info, simm8; andi zero, zero, simm8; .endmacro
|.macro infol, simm16; auli zero, zero, simm16; .endmacro
|
|
|// Pseudo instructions specific to this project
|// Stack-related
|.macro prologue, size
|	sw sp, lr
|	addi sp, sp, -size
|.endmacro
|
|.macro epilogue, size
|	addi sp, sp, size
|	lw lr, sp
|.endmacro
|
|.macro loadfromstack, reg, idx
|	addi r25, sp, idx
|	lw reg, r25
|.endmacro
|
|.macro storeonstack, reg, idx
|	addi r25, sp, idx
|	sw r25, reg
|.endmacro
|
|// Easier word multiply
|.macro mulw_uu, d, a, b
|	mulhl_uu d, a, b
|	mulhla_uu d, b, a
|	shli d, d, 8
|	mullla_uu d, a, b
|	mulhhsa_uu d, a, b
|.endmacro
|
|.macro mulw_ss, d, a, b
|	mulhl_ss d, a, b
|	mulhla_ss d, b, a
|	shli d, d, 8
|	mullla_ss d, a, b
|	mulhhsa_ss d, a, b
|.endmacro
|
